{"title":"ソフトウェアエンジニアは事業を壊すかもしれないという話","description":"bosyu Advent Calendar 2019の24日目の記事です。サービスを作るエンジニアはサービスをスケールさせるための設計力が必要だぞということを書いている記事です。ほんとはwebフロントエンドの設計の記事を書く予定だったのですが、間に合わなかったので、設計の話はおまけで書いてます。","body":"<p><img src=\"/images/architecture/ad_20191224.png\" alt=\"\" draggable=\"false\"></p>\n<style>\n.image-wrapper {\n  max-width: 400px;\n  margin: 0 auto;\n}\n</style>\n\n\n<h2 id=\"この記事について\">この記事について</h2><p>こんにちはみゃけです。<br>この記事は<a href=\"https://qiita.com/advent-calendar/2019/bosyu\">bosyu Advent Calendar 2019</a>の24日目の記事です。\nもうアドベントカレンダーも終わりますねー。</p>\n<h2 id=\"このタイトルで記事を書こうと思った背景\">このタイトルで記事を書こうと思った背景</h2><p>タイトルは「ソフトウェアエンジニアは事業を壊すかもしれないという話」です。\nそのまんまの意味でソフトウェアエンジニア（長いのでこの記事ではエンジニアと言ってしまいます）は会社の事業を壊したり、止めたりという原因に成りかねないという話です。<br>けっこう大それたタイトルなんですが、ここ数年しみじみと感じているので一度記事として書いておきたいなと思いました。</p>\n<p>Webサービスやアプリなどを事業としているほとんどの会社にはエンジニアが在籍していて、日々そのサービスの開発をしていると思います。\n満を持してサービスローンチを行い、多額の資金調達を行う会社はそれなりの数が存在します。\nそこから順調に業績を伸ばし、IPO（新規上場）や事業売却をする会社も存在します。\nただそこまでいける会社は一握りです。\nそこまで辿り着けない原因はいくつかあると思います。</p>\n<ul>\n<li>顧客、ユーザーが集まらなかった</li>\n<li>資金が尽きた</li>\n<li>継続していくための人がいなくなった</li>\n</ul>\n<p>などなどさまざまです。</p>\n<p>これらの原因の根本的な原因もいくつかあるかもしれませんが、インターネットを通じてサービスを提供している会社の場合はエンジニアが大きく関わってきています。\nサービスをローンチするというところまではそこまで難しいこともなく無事に事が進むでしょう。\n問題はそこから先です。</p>\n<ul>\n<li>継続リリースをするとバグやデグレが発生する</li>\n<li>経営陣やユーザーの要望に応えるのまで時間がかかる<ul>\n<li>機能追加が難しいコードになっている</li>\n</ul>\n</li>\n<li>ランニングコストの増加</li>\n<li>セキュリティの問題</li>\n</ul>\n<p>いわゆる「技術的負債」と呼ばれるものが顕在化してきます。\nリリースまではなんとなく危ういなーとか思いつつもそれなりに動いているし大丈夫かみたいな力が働いて見ないようにしていたものが見えてくるみたいなやつです。</p>\n<p>「ランニングコストの増加」や「セキュリティの問題」については最初にちゃんとコスト計算して、セキュリティリスクを把握しておくことが重要というか必須です（ここについて語るつもりも知識も十分ではないのでこれ以上書きません）。</p>\n<p>「継続リリースをするとバグやデグレが発生する」「経営陣やユーザーの要望に応えるのまで時間がかかる」についてはサービスの作り方の問題です。\nこの問題が顕在化してくると事業としてアクセルを踏みたいときに踏めないみたいな状況となり好機を逃すことになるかもしれません。\nまた新規性で話題になっていたとしても、でかい会社に類似サービスを出され、追従されると厳しい戦いになります（そうならないために特許でガチガチにできれば優位は保てるかもしれませんが）。</p>\n<p>このようなアクセルを踏みたくても踏めずに失速してくという話はたまに聞こえてきます。\nせっかく世にサービスが出て、話題になったとしてもこれでは浮かばれません。\nこのような状況にしてしまう原因の一部は我々エンジニアなのです。</p>\n<h2 id=\"事業のブレーキとならないために\">事業のブレーキとならないために</h2><p>理想の話をすれば、機能の追加や改善をスムーズに行い、スムーズにリリースできることです。\nスムーズなリリースについてはCI/CDの環境を作るのが一般的になってきているので、そこは自社のサービスなら用意しておきましょう。\n手動でやる時代ではないです。</p>\n<p>問題となるのは機能の追加や改善をスムーズに行えないことです。\n原因は簡単で、コードがそうなっていないから。\n可読性がなくスパゲッティになっていたり、コンポーネント同士が密結合になっていたり、共有されるべきスコープを越えたコードが存在していたりなどです。\n要は設計に問題があり、品質が良くないコードという場合です。</p>\n<p>この問題は<a href=\"https://www.amazon.co.jp/dp/4048930656\">Chean Architecture</a>や<a href=\"https://www.amazon.co.jp/dp/4798121967\">エリック・エヴァンスのドメイン駆動設計</a>などでも書かれているのですが、サービスは規模や時間経過とともに、機能追加や改善にかかるコストは増加傾向になります（Clean Architectrueの方に具体的なグラフとか載っている）。\nある程度コストが増加していくのは仕方のないことですが、設計によりコストの増加傾向を抑えることはできます。\nつまり設計をしっかりすれば事業のブレーキにはなりづらいという話になります。</p>\n<h3 id=\"設計できるリードエンジニアをチームにおく\">設計できるリードエンジニアをチームにおく</h3><p>設計といっても一朝一夕で身につくようなものではありません。\n前述したClean Architectureやドメイン駆動設計などの設計に関する書籍を読み、現場で実践して身につくスキルだと個人的には考えます。\nまた、設計のスキルを持ったエンジニアのレビューを受けることでも身につきます。</p>\n<p>設計に自信が持てない少人数のチームであれば、リードしてくれるエンジニアを立てたり、迎える（社員や業務委託）のがよいでしょう。\nそして開発初期にレビューやペアプログラミングを重点的に行いチームの底上げを行います。\nそうすると初期は開発速度が出ないのですが、徐々に設計スキルなどが身につき速度とコードの品質が上がっていきます。\nローンチ後も機能追加などは行いやすい状態になっているでしょう。</p>\n<h3 id=\"サービスの運用が始まってからのリファクタリング\">サービスの運用が始まってからのリファクタリング</h3><p>よくローンチ後にリファクタリングのタイミングを設けようという話にはなるのですが、まあ実際のところそんな時間はないですよね。\n週1のリファクタリングの時間を作るっていうのもいつの間にか形骸化しがちです。\nこれらはよくある話だと思います。<br>ただ、チームとしてもなんとなくこのままじゃだめだみたいな空気感はあります。\nこういうのは早めに手をうっていかないといずれやるからいいだろうみたいな割れ窓理論的に割れ窓が増えていくことにつながります。</p>\n<p>どうするのがいいのかって話ですが、1つは当たり前ですがいつかのままにしておかないことです。\nただいきなりメンバーでいっせいにやるぜってやっても、方針が立っていないとけっこう時間をムダにしてしまいがちです。\nあらかじめ、1人でもいいので方針を決めておくというのをしておくのがよいでしょう。<br>また2つ目としては誰か専任でリファクタリングし続けるとういのもあります。\nリファクタリングした内容の周知も含め定期的なMTGなどをしておくとチーム内に変更も浸透し全体的な品質の向上も見込めます。\nまたMTG内で今後の方針の再確認もしていけるとよいかもしれません。</p>\n<h3 id=\"新規サービスを開発するときの選択肢としてNo_Codeはどうか\">新規サービスを開発するときの選択肢としてNo Codeはどうか</h3><p>正直な話、当たるかどうかもわからないサービスにお金も時間もかけたくないというのが本音だと思います。\nそういった需要があるので最近はプログラミング不要でサービスが作れるNo Codeに注目が集まっています。\n筆者自身はまだ触ったことがない（まだ興味がそそられていないし自身に対する需要もないというのもある）ですが、プロトタイプのサービスを作るときにはもってこいだと思います。<br>ただ、No Codeのサービスはスケールやパフォーマンスが使っているプラットフォームに依存してしまいます。\nスケール可能でもスケールするとコストがとんとんと上がっていくことになるでしょう（サービス提供側も事業としてやってるので儲けないとやっていけない）。\nまた、サービスの提供が終了するかもしれません。\nこれは純粋にリスクですし、ずっと依存し続けるのは得策とは言えません（順調なのにサービスを停止しないといけなくなるのはほんと笑えない）。\nそのためどこかで内製に切り替えるタイミングが必要でしょう（ステージで言うとアーリー〜ミドル初期ぐらいが妥当そう）。</p>\n<h2 id=\"まとめ\">まとめ</h2><p>最近考えていたことを書けた気がします。\n今年はフリーランスになり技術顧問や業務委託でさまざまなチームを経験させてもらいました。\n多くは書けないですが、どのチームも負債と戦っていたり、設計で悩んでいたりと似たような課題を持っていました。\n僕が入っているうちに伝えきれればよかったのですが、1社1社にかけられる時間も限られており、どうも伝えきれていないと個人的に思っていました。\n一緒に仕事した人たちにも届いてくれると嬉しいなと思います。</p>\n<p>設計についてはほんとに作るサービスによって多様で、銀の弾丸のようなものは存在しません。\nまずは先達の経験が詰まった著書を読むなどして、自分で身につけて行く必要があると思います。\nまた、web上にも優れた記事やサイトが存在しています。\n<a href=\"https://xn--97-273ae6a4irb6e2hsoiozc2g4b8082p.com\">プログラマが知るべき97のこと</a>などは無料で読めて、1つ1つが長くないのでちょっとずつ読み進められるのでオススメです。<br>ただ設計はかなり抽象的な話になりがちです。書籍を読むだけではわかりづらいので、実装してみた系の記事と書籍、解説記事などを往復しながら読み進めていくとよいかもしれません。\n注意点があるとすれば解釈が人それぞれになったりするので、書籍（原著や翻訳版）をベースに複数の解説を見る方がよいでしょう。</p>\n<p>記事のタイトルにもしていますが、ほんとにエンジニアは事業を壊してしまう可能性があります。\n事業としてスケールすれば世界とも戦えたかもしれない事業を潰してしまうことにもなりかねないです。\nそのあたりのことも考えて、我々エンジニアは事業に向き合っていく必要があると思います。\nビジネスのことはよくわからないという人も、コードをきれいに保っておくことが\b成功につながることもあるので、コードと真摯に向き合うことが大切かと思います。\nただ、向き合いすぎて遅くなっては本末転倒なので、そのあたりのバランス感覚も大切だと考えます。</p>\n<p>最後にほんとは24日のアドベントカレンダーで書く予定だったwebフロントエンドの設計の話を補足的に書いておきます。\n先に断っておくとここから下の部分で1記事書けそうな感じです。\n暇な人は見てやってください。</p>\n<h2 id=\"ほんとは書きたかったwebフロントエンドの設計の話\">ほんとは書きたかったwebフロントエンドの設計の話</h2><p>サンプルのコードを書ききれてない&amp;DDD本読みきれてなくて中途半端な状態になったので、おまけ的に現状考えていることを書いておきます。\n俺が考えた最強のアーキテクチャ的の話ですが、書きながら整理しつつブラッシュアップしたいのでお付き合いください。<br>あと話の流れでVue.jsやReactが出てきてAngularが出てこないみたいになってますが、最近のAngularは追えておらず出せないだけなので悪しからず。</p>\n<h3 id=\"設計概要\">設計概要</h3><p>設計の方針は「DDDっぽく、負債になりづらい程度のレイヤー分けをする」です。\n捨てやすく組み込みやすいを目指します。\nターゲットは内製の新規サービスの開発時です。\n設計や調査に時間をかけていられないけど、サービスは早くローンチしたいし、運用が始まってからのリリース速度もそれなりに保ちたいみたいなところです。\nそしてある程度方向性が見えたらリニューアルするという選択が迫られると思うのですが、その場合に再利用がある程度できる状態を目指します。\nまた、DDDやClean Architectureにがっつり乗っ取るとけっこうな層や役割ができ、手数が増えるので、コストを最小限に抑えたい初期段階のサービスには向かないと個人的には考えています（ユビキタス言語の定義ぐらいはしておきたいという気持ちはある）。\nなのでDDDやClean Architectureのいいところ残しつつ層や役割を少なくできないかなーっという妄想しながら考えてます。\n先に断っておくと全然レイヤー多いし手数も多そうみたいなものしかまだできてないです😇\n机上の空論にならないようにこの記事やコードを書いている状況です。\nそのため拙い部分もあるかもしれませんが、そこは途中ということをお許しください。</p>\n<p>サンプルコードは<a href=\"https://github.com/gothinkster/realworld\">RealWorld</a>をベースに作っています。\nRealWorldはよくあるToDoアプリじゃ検証にならないよねってことで考えられたサンプルアプリケーションです（起源まで調べたわけじゃないのでテキトーなこと言ってるかもしれません）。</p>\n<p>どんなものが作られるかは<a href=\"https://vue-vuex-realworld.netlify.com\">こちら</a>を見ていただくと良いかと思います。\nこちらはVue.jsで作られたものです。\n実際にユーザーを作成したりも可能になっていますが、パブリックなAPIサーバーと繋がっているので個人が特定できるようなデータは入力しないことをオススメします。</p>\n<p>今作っているサンプルコードは<a href=\"https://github.com/mya-ake/vue-composition-api-realworld\">こちらのリポジトリ</a>です。\nVue Composition APIを使いって書きたかったので、Vue.jsで書いています。\nただviewのフレームワーク・ライブラリに依存するようなものではないので、この記事ではVue.jsについての話はほぼ出てこないです。</p>\n<h3 id=\"今のところ考えているレイヤー構造\">今のところ考えているレイヤー構造</h3><p>5層+モジュールごとの縦割りが入る形です。\n突貫で作った図を載せておきます。</p>\n<div class=\"image-wrapper\">\n\n<p><img src=\"/images/architecture/my_ddd.png\" alt=\"\" draggable=\"false\"></p>\n</div>\n\n<p>上から下に依存（利用）する方向です。逆はありません（Domain層がUse Case層を使うみたいなやつはない）。</p>\n<p>それぞれの層を一言ずつぐらいで紹介すると</p>\n<ul>\n<li>Repository層：APIサーバーとのHTTP通信や外部サービス、IndexedDBやインメモリのデータストアに接続するところ</li>\n<li>Domain層：ドメインのふるまい（ビジネスロジック、データの取得や保存、バリデーションなど）を書くところ</li>\n<li>Use Case層：複数のドメインの操作をしたりなど特定の処理を束ねるところ（Facadeの役割）</li>\n<li>UI Service層：UIやフレームワーク・ライブラリに合わせた、レンダリングに必要なデータを用意するところ（Vue.jsのscript、ReactのJSX以外のところ）</li>\n<li>UI層：HTMLをレンダリングするところ（Vue.jsのtemplateやReactのJSX部分）</li>\n</ul>\n<p>UI層、UI Service層はviewのフレームワーク・ライブラリに依存しますが、Use Case層より下はviewのフレーム・ライブラリのAPIは使わずに素のTypeScript（または、JavaScript）で書きます。\n割とよくある感じの構造なので真新しい感じではないですが、特徴としては縦にも切って、モジュールごとに管理しようという点です。</p>\n<p>ディレクトリ構造を作るとこんな感じでしょうか（サンプルコードはまだこうなってないです）。</p>\n<pre><code class=\"hljs \">src/\n　├ modules/\n　│　├ <span class=\"hljs-literal\">user</span>/\n　│　│　├ <span class=\"hljs-literal\">components</span>/\n　│　│　├ services/\n　│　│　└ usecases/\n　│　├ article-list/\n　│　└ article-detail/\n　├ <span class=\"hljs-literal\">components</span>/   <span class=\"hljs-comment\"># BaseButtonなどグローバルなやつ</span>\n　├ pages/        <span class=\"hljs-comment\"># ページとなるコンポーネント、モジュールのコンポーネントをレイアウトなど</span>\n　├ domains/\n　└ repositories/</code></pre><p>modulesの中はUse Case層、UI Service層、UI層が入ります。\nDomain層、Repository層はモジュールに囚われず利用されるので、modulesには含めていません。\nまたコンポーネントもグローバルに利用されるもの、たとえばボタンなどはモジュールを超えて利用されるので、これもmodulesの外に出しています。\nディレクトリ構造図に書かなかったですが、他のユーティリティとかライブラリのアダプターとかもそれぞれmodulesに含めず、src直下にディレクトリを作ってしまえばよいでしょう。</p>\n<h3 id=\"モジュール\">モジュール</h3><p>モジュールは捨てやすく組み込みやすいを実現するための分類です。\nmodulesはUIパーツと思ってしまってよいです。\nTwitterでいうならタイムラインやサイドバー、おすすめユーザーなどがモジュールになります。</p>\n<p>このモジュールはUIが変わるならUI層を変えればよいですし、UIが大きく変わるとなれば新しいモジュールを作り、使えるUI Service層やUse Case層を移植し、置き換えることができたら既存のモジュールを消します。</p>\n<p>経験してる方も多いと思いますが、既存のコードを書き換えるというのはけっこうハードルが高いです。\nコードのリーディングから始まり（自分で書いていたとしても）現状を把握するところから始まります。\nJS部分などは関数名から動きを予測しやすいですが、UI層となるHTML、CSS部分は余計難しいです。\nUI層が変わるのであれば、既存コードを読まずに置き換えてしまえぐらいがカジュアルにできるとよいと考えます。</p>\n<h3 id=\"コンポーネント設計\">コンポーネント設計</h3><p>これまでAtomic Designや粒度で分類するというのをやってきていました。\nそのときの話とかは<a href=\"https://mya-ake.com/posts/component-design-based-on-atomic-design/\">Atomic Design ベースのコンポーネント設計を考えてみた</a>をご覧ください（書いてみての後日譚は別のスライドとして残っています）。</p>\n<p>粒度でやったときの課題感としては次が挙げられます。</p>\n<ul>\n<li>決められた粒度に分類するための議論が必要</li>\n<li>このOrganismを構成しているコンポーネントはどれ？</li>\n<li>このコンポーネントは更新しても大丈夫？</li>\n<li>使ってないコンポーネントは消しておきたいんだけどどれ？</li>\n<li>数が多くて覚えきれない<ul>\n<li>カタログのようなものがないと名前と見た目が一致しなくなる</li>\n</ul>\n</li>\n</ul>\n<p>作ってる間はうまくいってる感じするのですが、開発後期や運用が始まるとこれらの課題感を実感してきます。\n正直ツールによる補助がないと厳しいなと思います。依存を視覚化したり、コンポーネントを見るためのカタログなどです。\nこれらのツールまでメンテしないといけないとなるとかなり時間が割かれてしまいます。\nアプリケーションを作っているのかツールを作っているのかわからなくなります。</p>\n<p>じゃあどうするのかというとUIの大きなパーツで分けてしまえというところに今は落ち着いています。\n前述したモジュールですね。\nモジュールで分けると\bデータや処理もまとまってくるので、関連しているものが集まるので触りやすいです。\nこのコンポーネントを変えるとあのコンポーネントが変わるかもしれないなどという心配もなくなります。\n使ってる使ってないなどもモジュール内に閉じているので明確です。</p>\n<p>モジュールを作るのはいいとしてもモジュールは1つのコンポーネントで構成するというわけにもいきません。\nモジュールの中でもコンポーネント分割は生まれてきます。\nこれについては見通しがいい分け方ならなんでもいいと思います。\nモジュールの規模感もあるかもしれませんが、Container/Presentationalコンポーネントの指針でおおよそきれいにまとまるはずです。\nモジュール内のコンポーネント設計指針については作るアプリケーションの規模種類によるので、チームでざっくり方針を立てるのがよいでしょう。</p>\n<p>もちろんボタンやユーザーアイコンなど基礎的なコンポーネントは別途用意しておく必要があると思います。\nこういうのは前述の通り<code>/src/components/base</code>あたりに格納しておいて、モジュールから利用するのがよいと思います。\nまたモジュールによってはbaseと似てはいるけど違うんだよなーみたいなコンポーネントも出てくると思うので、そういったものはbaseのコンポーネントに拡張の余地を残しておくか、モジュール内で新しく作ればよいです。\nモジュール内で新しく作る場合は、baseとなる機能に漏れないよう作っておくべきです。\nReactであればHooks、Vue 3であればCompostion APIなどいい感じに機能を分離して記述できるようになってきているので、活用することで漏れないように作れると思います。</p>\n<p>加えてモジュール同士でコンポーネントを共有したいみたいなケースも出てくると思います。\nそういったものも<code>/src/components/&lt;domain-name&gt;</code>みたいな感じで共有します。\nただ、こういうケースは実は同じモジュールにできるという可能性もはらんでいるので、作りたくなったら立ち止まる必要があります。</p>\n<h3 id=\"リニューアルするときの再利用性\">リニューアルするときの再利用性</h3><p>リニューアルする際にはDDDを基本にします。\n規模感にもよるかもしれませんが、今考えているアーキテクチャより層や役割が増えると思います。\n冒頭にも書いたのですが、リニューアルをする際にある程度再利用させたいです。\n欲を言えば現行のものをリファクタリングして、リニューアルができればさらによいと考えています。<br>ただ作るものによっては全然再利用できんやんってことも普通にありえるので、この再利用性については希望的観測が多分に含まれています。</p>\n<p>リニューアルするとなるとデザインが大きく変わるものなので、UI層やUI Service層はほぼ捨てることになるでしょう。\nこれは仕方ないです。\nしかし、捨てることになるので他のフレームワーク・ライブラリに乗り換えることも選択としては可能になります。\n数年後には新しいものができているかもしれませんし、そのときに選択できる余地を残しておきたいです。\nまあただこれまで書いてきた知見もあるので、view系のライブラリは使い続けるに越したことはないしょう。</p>\n<p>Use Case層より下は素のTypeScriptで書かれているので再利用可能なものも出てきます（出てきてほしい）。\nリニューアルしたとしてもバックエンドのDBの構造は大きく変わるものでもないので、Domain層やRepository層はそこまで変わらないので再利用できるんじゃないかなーっと楽観的に考えます。</p>\n<p>つらつら書いてましたが、再利用性とか気にせず、保守性高く作っておけばおのずと再利用できるものになってるかもしれないので、開発しているときはあまり気にしないのがいい気がしてきました。\n使い回せたらラッキーと思っていましょう。</p>\n<p>（このセクション必要だったのだろうか、、）</p>\n<h3 id=\"このアーキテクチャで扱えないものがでてきたら\">このアーキテクチャで扱えないものがでてきたら</h3><p>開発してるとどうしても想定していた構造に当てはまらないものが出てきがちです（ぱっと例が出てこないですが）。\nそういたったものは無理に含めず、独立して考えるのがよいです。\n大事なのは依存の方向を一方向にすることです。\nこれさえ守っていれば大きく壊れる可能性は低いです。</p>\n<h3 id=\"まとめ\">まとめ</h3><p>ざっと今考えていることを書いたのですが、まだまだ荒削りだなーっと思います。\nそのあたりはRealWorldのコードを書いたり別のものを作ったりしながらブラッシュアップしてけたらと思います。<br>あと考えていて思うのはDDDやClean Architectureの劣化版でしかないんじゃないかというのも思ったりします。\nただそれぞれチームのメンバーに浸透させるのにはそれなりの時間がかかりますし、経験の浅いメンバーからするとなぜこんなに分けて書くの？ってなると思います。\nそこをちゃんと理由を付けて解説するのが役割かもしれませんが、話したとしてもすぐに理解につながるとは思えません。\n自分自身がプログラムを書き始めた頃を思い出しても、その頃は「なんかわからんけど、プログラムが動いて楽しい!よし作れた！」みたいな状態なので、設計の大事さってのは感じない気がします。<br>いやまあでも、教えるのが正しいですね、しっかり解説できて納得させるぐらいの力を自分が身につければいいだけの話ですね。\n逃げてはいけないところな気がしてきました。</p>\n<p>それでもアーキテクチャを考えることはムダではないと思いますし、考えることで自分の現場に合わせられる力につながると思います。\nいろいろ試行錯誤して、自分なりの解を見つけていけるようがんばりたいと思います。\nとりあえずDDD本読み切ろう（Kindleで読んでるんですが、読み終えるまでの時間がなかなか減らなくていつ読み終わるんだろうと精神的にツラいお気持ちになる）。</p>\n<p>なんかうまくまとめられませんが、みんな設計を学んで、俺が考えた最強のアーキテクチャ作っていこう！！</p>","thumbnail":"/images/architecture/ad_20191224.png","createdAt":"2019-12-24"}