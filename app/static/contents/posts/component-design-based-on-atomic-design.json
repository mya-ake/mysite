{"title":"Atomic Design ベースのコンポーネント設計を考えてみた","description":"コンポーネント設計に悩み Atomic Design を検討した結果 Atomic Design に落ち着いたという話です。Atomic Design の原典を読んだりなどして、自分なりに制約を作りコンポーネント設計として落とし込んだ内容になっています。","body":"<h2 id=\"背景\">背景</h2><p>筆者が個人的に仕事を受けはじめた会社のフロントエンドのプロジェクトを立ち上げることになりました。\nそこでせっかく新しく作る機会があるならコンポーネントの分割の仕方（コンポーネント設計）を明確に定義したいと思いました。</p>\n<p>そもそもなんで分け方を定義したいとなったかというと、後からメンバーがプロジェクトに入ってきたときに、スムーズにプロジェクトに入ってもらうためです。</p>\n<p>今まで作ってきたプロジェクトでのコンポーネントの分け方は、「2,3回使う場合はコンポーネントに分ける」\n「長くなって見通しが悪いコンポーネントは分ける」など曖昧なところもありますがシンプルなものでした。\nただこの分け方をするとコンポーネント自体が大きくなりがちでした。<br>今のところプロジェクトに関わる人数も少なく、個々のメンバーのレベルも高いため運用できていますが、人が増えた場合や他のメンバーとなった場合は「苦しいのではないか？」という気持ちがあります。</p>\n<p>このような背景があり自分の考えをまとめるためにもこの記事を書き始めました。</p>\n<p>そして最終的に Atomic Design ベースの設計になりました（合わせてタイトルも Atomic Design になりました）。</p>\n<h2 id=\"Atomic_Design_を導入することを考える\">Atomic Design を導入することを考える</h2><p>まずは目にすることが多くなった「Atomic Design」を導入することを考えてみました。</p>\n<p>ただAtomic Design はデザインシステムの1つです。\nあくまでもデザインにおける設計論です。\nそのため実装に関しての明確な手法は存在していないのが現状となっています。</p>\n<p>Atomic Design を知るために原典となる「<a href=\"http://atomicdesign.bradfrost.com\">Atomic Design by Brad Frost</a>」を読んで見ることにしました（長いので Chapter 2\nAtomic Design Methodology だけ読みました）。</p>\n<h3 id=\"ざっくり_Atomic_Design\">ざっくり Atomic Design</h3><p>Atomic Design は化学分野の原子や分子など物質の組成に関する機能を基に考えられたデザインシステムです。\nページにおけるパーツを次の5カテゴリに分類します。</p>\n<ul>\n<li>Atoms</li>\n<li>Molecules</li>\n<li>Organisms</li>\n<li>Templates</li>\n<li>Pages</li>\n</ul>\n<p>Atoms がもっとも小さく、Pages がもっとも大きいです。\n下のカテゴリが上のカテゴリをラップする感じになるので、下のカテゴリは上のカテゴリに依存します。その逆はありません。</p>\n<p>それぞれを筆者なりに要約しました。\n図示が見たい場合はリンク先に飛んでください。</p>\n<h4 id=\"Atoms\">Atoms</h4><p>Atoms は UI を構築するための最小単位です。\nこれ以上分割することができません。\n基本的には単体の HTML タグと同等な役割となります。</p>\n<p><a href=\"http://atomicdesign.bradfrost.com/chapter-2/#atoms\">http://atomicdesign.bradfrost.com/chapter-2/#atoms</a></p>\n<h4 id=\"Molecules\">Molecules</h4><p>Molecules は Atoms のグループです。\n比較的シンプルな UI 要素のグループとなります。\nたとえば検索フォームを例にすると、次の3つの Atoms から構成されます。\n便宜上基礎的な HTML タグで記述しています。</p>\n<pre><code class=\"hljs language-HTML\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"search\"</span>&gt;</span>サイト内検索<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"search\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"search\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span>検索する<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></code></pre>\n<p><a href=\"http://atomicdesign.bradfrost.com/chapter-2/#molecules\">http://atomicdesign.bradfrost.com/chapter-2/#molecules</a></p>\n<h4 id=\"Organisms\">Organisms</h4><p>Organisms は、Atoms / Molecules / 他の Organism からなるグループです。\nUI における個別のセクションを表す複雑なコンポーネントとなります。</p>\n<p><a href=\"http://atomicdesign.bradfrost.com/chapter-2/#organisms\">http://atomicdesign.bradfrost.com/chapter-2/#organisms</a></p>\n<h4 id=\"Templates\">Templates</h4><p>Templates は Organisms / Molecules の集合です。\nこの段階で web サイト 1 ページのワイヤーフレームのようになります。\nページのコンテンツは流し込まず、スケルトンでコンテンツを代替します。</p>\n<p>ちなみに Templates からは化学用語ではなくなります。\nその理由は徹底的にやるとステークホルダー（クライアントや上司など）を混乱させかねないからだそうです。</p>\n<p><a href=\"http://atomicdesign.bradfrost.com/chapter-2/#templates\">http://atomicdesign.bradfrost.com/chapter-2/#templates</a></p>\n<h4 id=\"Pages\">Pages</h4><p>Pages は Templates にコンテンツを流し込んだ状態です。\nこの段階ですべてが具体的になります。\nまた Pages はバリエーションを表現するための役割もあります。\n検索結果がない場合やページングなどのそのページにおけるバリエーションの変化がここで現れます。</p>\n<p><a href=\"http://atomicdesign.bradfrost.com/chapter-2/#pages\">http://atomicdesign.bradfrost.com/chapter-2/#pages</a></p>\n<h3 id=\"原典からわかったこと\">原典からわかったこと</h3><ul>\n<li>デザインを構築するための設計論</li>\n<li>当たり前だが実装方法については書いてない</li>\n<li>UI における分類に名前が付いてプロジェクトごとに定義しなくてよくなる</li>\n<li>コンポーネントベースなので使い回すことが前提でデザインが組み上がる</li>\n<li>コンポーネントを分割するときの1つの指標にできそう</li>\n</ul>\n<h2 id=\"Atomic_Design_で実装することを考える\">Atomic Design で実装することを考える</h2><p>原典を読んでなんとなく実装する際のコンポーネント分割の指標にできそうでした。\nただ 5 つのカテゴリの中でワイヤーフレームとなる Templates は不要そうです。\nそうすると「Atoms」「Molecules」「Organisms」「Pages」の4つになります。</p>\n<h3 id=\"Atomic_Design_の制約\">Atomic Design の制約</h3><p>Atomic Design をベースにするなら基本的には Atomic Design の制約に則り実装すべきであると筆者は考えます。\n現状の制約を表にすると次のようになります。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">カテゴリ</th>\n<th align=\"center\">依存してもいいもの</th>\n<th align=\"center\">依存の数</th>\n<th align=\"center\">備考</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Atoms</td>\n<td align=\"center\">なし</td>\n<td align=\"center\">0</td>\n<td align=\"center\">分割できてはいけない</td>\n</tr>\n<tr>\n<td align=\"center\">Molecules</td>\n<td align=\"center\">Atoms</td>\n<td align=\"center\">2 以上</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">Organisms</td>\n<td align=\"center\">Atoms, Molecules, Organisims</td>\n<td align=\"center\">いくつでも</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">Pages</td>\n<td align=\"center\">Organisms</td>\n<td align=\"center\">いくつでも</td>\n<td align=\"center\">Organisms を組み合わせるだけ</td>\n</tr>\n</tbody></table>\n<p>ただし、これだけの制約では実装するときに困ります。\n実装する際にはデータを必ず扱います。\nまたストアというグローバルなステートを保管している領域も存在します。\nこれらの扱いが定まっていないと予期せぬ依存が発生してしまい上記制約を満たすこともできなくなる可能性があります。\nそのためデータの流れやストアに関する制約も定めておく方が無難そうです。</p>\n<h3 id=\"データなどソースコードを書く上での制約\">データなどソースコードを書く上での制約</h3><h4 id=\"データフローの制約\">データフローの制約</h4><p>基本的にデータは Pages → Organisms → Molecures → Atoms という順になるでしょう。\nまた逆に子から親へはイベントの伝播によってデータを渡すことになります。\nこの点に関しては最近の View 層のライブラリやフレームワークですでに制約があると思うのであまり気にする必要はなさそうです。</p>\n<h4 id=\"処理の制約\">処理の制約</h4><p>フローに関してはライブラリ、フレームワークレベルで担保されるので大丈夫ですが、それぞれのカテゴリでどこまで処理を行ってよいかの定義が必要だと考えます。\nたとえばどのカテゴリから API サーバーにリクエストを送ってよいか、具体的な処理（たとえばバリデーションなど）を行ってよいかなどです。</p>\n<p>Atoms や Molecules はシンプルに保つ必要があるので、ここに具体的な処理を書くのは違うように思えます。\nAtoms や Molecules では複数箇所で使われる前提なのでデータの受け付けとイベントの伝播だけに徹するのが無難そうです。\nもし Atoms や Molecules で処理したい場合は親から関数をもらうようにしましょう。</p>\n<p>そうすると Organisms と Pages で具体的な処理を書くことになります。\nただそれぞれはスコープが異なるのでなんでもしていいかというとそういうわけではないと考えます。\nOrganisms は特定のセクションになるので、自身が扱わないデータまで扱ってしまうと依存が別の方向にまで広がってしまいます。\nそのため Organisms では自身の扱うデータを超えない程度の API サーバーへのリクエスト（たとえば検索のコンポーネントならサジェストなど）のみを許可すべきでしょう。<br>Pages はそのページにおける最大のコンポーネントなので、Organims が扱えない範囲の API サーバーへのリクエストを行い、取得したデータを必要とする Organisms に振り分ける役割を持たせます。</p>\n<h4 id=\"ストアへのアクセス権限の制約\">ストアへのアクセス権限の制約</h4><p>ストアは基本的にはどこからでもアクセスできるようになっていると思います。\n前述しましたがどこからでもアクセス可能だと予期せぬ依存が発生し得ます。</p>\n<p>ストアへのアクセスも処理の制約同様に Organisms か Pages で行うべきでしょう。\n認証状態などもすべて Organisms から Molecules へ渡します。</p>\n<p>Molecules で参照だけは可能にしてもよいかとも考えたのですが最終的には禁止としました。\nMolecules は複数箇所で使われる可能性が高いため、グローバルな値に依存していると予期せぬ同期などが発生しそうだと考えたからです。</p>\n<h4 id=\"ソースコードの制約まとめ\">ソースコードの制約まとめ</h4><table>\n<thead>\n<tr>\n<th align=\"center\">カテゴリ</th>\n<th align=\"center\">処理</th>\n<th align=\"center\">ストアへのアクセス</th>\n<th align=\"center\">備考</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Atoms</td>\n<td align=\"center\">イベントの伝播・親からもらった関数の実行</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">Molecules</td>\n<td align=\"center\">イベントの伝播・親からもらった関数の実行</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">Organisms</td>\n<td align=\"center\">⭕</td>\n<td align=\"center\">⭕</td>\n<td align=\"center\">スコープを越えない範囲で</td>\n</tr>\n<tr>\n<td align=\"center\">Pages</td>\n<td align=\"center\">⭕</td>\n<td align=\"center\">⭕</td>\n<td align=\"center\">-</td>\n</tr>\n</tbody></table>\n<p>これでなんとなく実装できそうな制約ができました。</p>\n<h2 id=\"本当にこの分け方_&amp;_制約で大丈夫？\">本当にこの分け方 &amp; 制約で大丈夫？</h2><p>ここでいったん今までのプロジェクトで作ったコンポーネントを思い返して適用できるか考えてみます。\nそうするとこの分け方に該当しづらいコンポーネントがありました。\nたとえばモーダルやアコーディオンなどの動きだけを提供するコンポーネントです。\n一見 Organisms に該当しそうですが、純粋に実装しようとするとそれぞれの動きを持ったコードをそれぞれ実装することになってしまいます。\nそうなってはコンポーネント指向であるメリットが薄れます。\nそこで Atomic Design の分類の外のカテゴリである「Providers」を追加すべきという考えに至りました。</p>\n<h3 id=\"Providers_カテゴリ\">Providers カテゴリ</h3><p>Providers は筆者が新しく定義したカテゴリです。<br>Providers カテゴリは特定の機能を有したコンポーネントのカテゴリです。\nアニメーションなどのインタラクションを表現するコンポーネントなどが該当します。</p>\n<p><small>記事公開当初は Presenters でしたが Providers に変えました</small></p>\n<p>たとえばアコーディオンのコンポーネントは開閉のアニメーションを行う機能を持っています。\nこのアコーディオンのコンポーネントはコンテンツを子に持つ次のようなラッパーコンポーネントとして使うことを想定します。</p>\n<pre><code class=\"hljs language-HTML\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-accordion</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>なんか長めのテキスト<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-accordion</span>&gt;</span></code></pre>\n<p>このような形で特定の機能をコンポーネントとして実装し、他のコンポーネントでも使えるようにするのが Providers の役割です。</p>\n<p>アニメーションなどのインタラクションを Organisms などに実装しようとするとただでさえ複雑になりがちな Organisms がさらに複雑化してしまいます。\nそこでそのインタラクション部分を Providers として切り出すことで、 Organisms は本来の役割だけに集中できるようになります。</p>\n<p><em>追記</em></p>\n<p>公開してから Providers は実装の都合によりコンポーネントとなるコンポーネントが該当するカテゴリという言い方がしっくりきました。\nSketch などのデザインツールで現れないコンポーネントを書くイメージです。</p>\n<h2 id=\"制約をどのように担保する？\">制約をどのように担保する？</h2><p>制約の定義や Providers カテゴリの追加により形があるものになってきたと思います。\nただし、実装が始まると期日というものもあるため、この制約がないがしろになる可能性もゼロではありません。\nレビューをしていたとしても漏れる可能性はあります。\nそこで、機械的にチェックするユニットテストをあらかじめ用意してくことで制約を満たしているかの担保ができるのではと考えました。</p>\n<h3 id=\"ユニットテストによる制約の担保\">ユニットテストによる制約の担保</h3><p>たとえば、Atoms であればストアへのアクセスがないかのチェックや、コンポーネントが単独でマウントできるか（依存しているコンポーネントがないか）をチェックすることができそうです。\nこのようなテスト（具体的な実装はまだできていない）を用意することで制約を満たしていこうというアプローチです。</p>\n<p>テスト自体は自動で行えればよいのですが、各コンポーネントの Props の定義は必ずどこかでする必要があります。\n静的解析をして自動で割り当てるということも可能かもしれません。\nただそこまで用意するモチベーションはないので、まずは各コンポーネントのテストコードをテンプレートから自動生成させようと考えています。</p>\n<h3 id=\"テンプレートの自動生成\">テンプレートの自動生成</h3><p>テンプレートの自動生成には <a href=\"https://www.hygen.io\">Hygen</a> の利用を考えています。\nHygen はスキャフォールディングをテンプレートを基に行うことができるツールです。\nnpm に公開されているので、npm scripts に生成コマンドを用意して、コンポーネント作成時はこのコマンドから作ります。\nそうするとコンポーネントの下地と各カテゴリーに合わせたテストを作成時から用意できるはずです。\nまた、Storybook 用のファイル生成も同時に行うこともできるでしょう。</p>\n<p>具体的なテンプレートはいずれ僕の GitHub に上がると思います。</p>\n<h2 id=\"Atomic_Design_ベースの実装方法のまとめ\">Atomic Design ベースの実装方法のまとめ</h2><p>長くなってきたのでいったん整理します。\n実装時のカテゴリは Atomic Design のカテゴリを元に Template を除く 4 つ + Providers に分ける。\n制約は次のとおりです。Providers の制約もここで追記しておきます。</p>\n<p><em>Atomic Design の制約</em></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">カテゴリ</th>\n<th align=\"center\">依存してもいいもの</th>\n<th align=\"center\">依存の数</th>\n<th align=\"center\">備考</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Atoms</td>\n<td align=\"center\">なし</td>\n<td align=\"center\">0</td>\n<td align=\"center\">分割できてはいけない</td>\n</tr>\n<tr>\n<td align=\"center\">Molecules</td>\n<td align=\"center\">Atoms</td>\n<td align=\"center\">2 以上</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">Organisms</td>\n<td align=\"center\">Atoms, Molecules, Organisims</td>\n<td align=\"center\">いくつでも</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">Pages</td>\n<td align=\"center\">Organisms</td>\n<td align=\"center\">いくつでも</td>\n<td align=\"center\">Organisms を組み合わせるだけ</td>\n</tr>\n<tr>\n<td align=\"center\">Providers</td>\n<td align=\"center\">なし</td>\n<td align=\"center\">0</td>\n<td align=\"center\">特定の機能の提供のみ</td>\n</tr>\n</tbody></table>\n<br>\n\n<p><em>ソースコードの制約</em></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">カテゴリ</th>\n<th align=\"center\">処理</th>\n<th align=\"center\">ストアへのアクセス</th>\n<th align=\"center\">備考</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Atoms</td>\n<td align=\"center\">イベントの伝播・親からもらった関数の実行</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">Molecules</td>\n<td align=\"center\">イベントの伝播・親からもらった関数の実行</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">Organisms</td>\n<td align=\"center\">⭕</td>\n<td align=\"center\">⭕</td>\n<td align=\"center\">スコープを越えない範囲で</td>\n</tr>\n<tr>\n<td align=\"center\">Pages</td>\n<td align=\"center\">⭕</td>\n<td align=\"center\">⭕</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">Providers</td>\n<td align=\"center\">⭕</td>\n<td align=\"center\">⭕</td>\n<td align=\"center\">スコープを越えない範囲で</td>\n</tr>\n</tbody></table>\n<h2 id=\"なんかいけそうな気配がする🙌\">なんかいけそうな気配がする🙌</h2><p>なんかいけそうな気配がしてきたので今のところ気になっていることを記述しておきます。</p>\n<h3 id=\"コンポーネントのローカルステート\">コンポーネントのローカルステート</h3><p>ネット上の情報を見ていると Atoms や Molecules はステートレスにするという情報がちらほらありました。\nただ個人的には Atoms も Molecules もローカルステートは持っていいと考えます。\nその理由は、 Atoms は HTML タグ同等の役割まで持ちうるからです。\nチェックボックスなど HTML タグの中にもローカルステートを持つものもあります。\nそう考えると Atoms も Molecules もローカルステートを持っていてもいいでしょう。</p>\n<p>また、そもそもコンポーネントの中に閉じているデータなので他に影響を与えることもないというのもあります。\nもし他に影響与えるなら何かが間違ってる気がします。</p>\n<p>もちろんステートレスにできるならステートレスなコンポーネントとすべきです。\nその方がパフォーマンス的にもよくなります。</p>\n<h3 id=\"コンポーネントの数\">コンポーネントの数</h3><p>Atomic Design をやると大量のコンポーネントが生まれます。\nコンポーネントが多くなるとそれだけ生成コストが発生します。\n画面に表示されるときだけでなくビルドの時間にも影響するでしょう。\nこれは許容できるのか？というところです。</p>\n<p>これに関してはやってみないとわからないなと考えてます。\nただコンポーネントの数が増えてパフォーマンスが著しく劣化したという例も今のところみかけないので数百程度なら大丈夫なのではとも思います。</p>\n<h3 id=\"すべてをコンポーネントとすべきか？\">すべてをコンポーネントとすべきか？</h3><p>これは悩ましいです。\nとくにテキスト系のコンポーネントをわざわざ作る必要はあるのかという点です。\nテキスト系は CSS のクラス 1 つで表現しようと思えばできるでしょう。</p>\n<p>ただ例外を作るとそれだけ管理が煩雑になりうるので、管理面というところで CSS だけで完結しそうでもコンポーネントにすべきな気がします。</p>\n<h3 id=\"Atomic_Design_で作られていないデザインを_Atomic_Design_ベースで実装して大丈夫か？\">Atomic Design で作られていないデザインを Atomic Design ベースで実装して大丈夫か？</h3><p>結論としては、まあ大丈夫では？というところです。\nというのもデザインの差は Molecules や Organisims で吸収できるので、どんなデザインでも適応は可能であると思います。\nただコンポーネント数が大爆発する可能性は大いにあります。\nそれが許容できるならという感じでしょうか。</p>\n<p>できるならデザインを作る段階から Atomic Design を意識しておく必要があると思います。</p>\n<h2 id=\"まとめ\">まとめ</h2><p>なんか Atomic Design ベースで実装できそうな気がします。\nというかここから先は実際に手を動かしてみないとよくわからないです。\n仕事先にはこの記事見せてご意見伺って許可がもらえたら実際にこの方法で構築してみようと思います。</p>\n<p>やってみての感想とかは随時 Twitter でつぶやくと思います。\n最終的な感想はまた改めて記事書くかもしれません（書きたい気持ちはある）。</p>\n<h3 id=\"この記事の後日譚\">この記事の後日譚</h3><p>フロントエンドのイベントで登壇機会があったので後日譚を発表してきました。↓資料。</p>\n<p><a href=\"https://mya-ake.com/slides/atomic-design-for-component-design\">Atomic Design をコンポーネント設計の指標として取り入れた話</a></p>\n<p>結論から言うとこの設計でけっこううまく機能しました。\nただ問題点はやはりいくつか生まれました。\n詳細はスライドを見ていただくとして、スライドに書いてないことを少し書いておきたいと思います。</p>\n<p>スライドの中で Fat Pages と Organisms 爆発という課題が発生したと書いてあります。\nスライドでは Atomic Components という解決策を提示してました。\nそれ以外の Fat Pages の対策としては Templates を使うことも考えられます。\nこの記事では Templates を使わない方針にしました。\nその理由はコンポーネント数の増加や Nuxt.js を使う想定だったので Pages と同じ数のコンポーネントを作るのがめんどうだったという理由でした。\nしかしながら、Templates を用意することで Pages にあった view に関する処理とデータに関する処理を分離できます。\nそうすると Pages をダイエットさせることができます。\nTemplates を使うという方針もありだと思ったので、ここに改めて書かせていただきました。</p>\n<h2 id=\"おまけ\">おまけ</h2><h3 id=\"Nuxt.js_にこのコンポーネント設計を導入する\">Nuxt.js にこのコンポーネント設計を導入する</h3><p>筆者はよく Nuxt.js をベースに作ります。\nNuxt.js は最初から Layouts と Pages というコンポーネントの分割に制約があります。\nLayouts はページのコンテンツ以外の部分、たとえばグローバルなヘッダーやフッターなどが置かれます。\nPages は Layouts の中に入るコンテンツのコンポーネントです。</p>\n<p>Pages が Atomic Design の Pages と Nuxt.js の Pages で名前が被っているのでとてもややこしいですね。\nなので Nuxt.js で導入する場合は（Atomic Design の）Pages の上に Layouts という概念を新たに置いておくべきだと思います。\n（Nuxt.js の）Pages を Atomic Design の Organisms 相当に置いてもいいのですが、まあ名前がややこしいです。\nあとディレクトリ構成的にも他と同じ Organisms として扱えないのでなんとも言えない気持ちになってしまいます。\nそういう理由から Layouts を増やします。</p>\n<p>Layouts は子に（Atomic Designの）Pages や Organisms を持ちます。\nそれ以外の制約は（Atomic Designの）Pages と同じで問題ないでしょう。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Atomic Designベースのカテゴリ</th>\n<th align=\"left\">Nuxt.js のディレクトリ</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Atoms</td>\n<td align=\"left\">/components/atoms/*</td>\n</tr>\n<tr>\n<td align=\"left\">Molecules</td>\n<td align=\"left\">/components/molecules/*</td>\n</tr>\n<tr>\n<td align=\"left\">Organisms</td>\n<td align=\"left\">/components/organisms/*</td>\n</tr>\n<tr>\n<td align=\"left\">Providers</td>\n<td align=\"left\">/components/providers/*</td>\n</tr>\n<tr>\n<td align=\"left\">Pages</td>\n<td align=\"left\">/pages/*</td>\n</tr>\n<tr>\n<td align=\"left\">Layouts</td>\n<td align=\"left\">/layouts/*</td>\n</tr>\n</tbody></table>","thumbnail":"","twitterCardType":"","createdAt":"2018-11-11","updatedAt":"2019-03-08"}