{"title":"CSS フレームワークを Vue.js のコンポーネントにする方法","description":"","body":"<h2 id=\"この記事について\">この記事について</h2><p>この記事は<a href=\"https://qiita.com/advent-calendar/2018/vuejs-2\">Vue.js #2 Advent Calendar 2018 - Qiita</a>の 20 日目の記事です。</p>\n<p>この記事では Google が提供しているマテリアルデザインの CSS フレームワークである<a href=\"https://material.io/develop/web/\">Material Components</a>を Vue.js のコンポーネントにしていく話を書いています。</p>\n<p>その過程で Vue.js におけるコンポーネントを作るときの要点なども一緒に書いてます。</p>\n<h3 id=\"バージョンなど\">バージョンなど</h3><ul>\n<li>Vue.js: 2.5.21</li>\n<li>Vue CLI: 3.2.1</li>\n<li>Material Components: 0.42.x</li>\n</ul>\n<h3 id=\"サンプルリポジトリ\">サンプルリポジトリ</h3><p><a href=\"https://github.com/mya-ake/vuepress-plugin-component-catalog/tree/master/example/material-components-web\">https://github.com/mya-ake/vuepress-plugin-component-catalog/tree/master/example/material-components-web</a></p>\n<h2 id=\"アウトライン\">アウトライン</h2><ul>\n<li><a href=\"#Material_Components\">Material Components</a></li>\n<li><a href=\"#今回作るもの\">今回作るもの</a></li>\n<li><a href=\"#Material_Components_をプロジェクトに導入する\">Material Components をプロジェクトに導入する</a></li>\n<li><a href=\"#Button_のコンポーネント\">Button のコンポーネント</a></li>\n<li><a href=\"#Text_Field_のコンポーネント\">Text Field のコンポーネント</a></li>\n<li><a href=\"#まとめ\">まとめ</a></li>\n<li><a href=\"#補足\">補足</a></li>\n</ul>\n<h2 id=\"Material_Components\">Material Components</h2><p>冒頭にも書きましたが Material Components は Google が提供しているフレームワークです。\nweb だけでなく Android / iOS / Flutter 向けにも提供されています。\nマテリアルデザインの提唱者である Google 自身が作っているので、ガイドラインに準拠した見た目のコンポーネントを作っていくことができます。</p>\n<p><a href=\"https://material.io/develop/\">Develop - Material Design</a></p>\n<p>具体的にどのようなコンポーネントが提供されているのかはサイト上にカタログページがるのでそちらを見るとよいでしょう。</p>\n<p><a href=\"https://material-components.github.io/material-components-web-catalog/\">Material Components Web | Catalog</a></p>\n<h2 id=\"今回作るもの\">今回作るもの</h2><p>今回は Button と Text Field を取り上げます。\n次の画像のような検索のコンポーネントっぽいものを作ります。</p>\n<p>フォーカスするとプレースホルダーになっていたテキストが左上に移動するかっこいいアニメーション付きのやつです。</p>\n<p><img src=\"/images/vuejs-component-with-css-framework/no-input.png\" alt=\"text fieldとbuttonの組み合わせ（入力なし）\" style=\"max-width: 320px; margin: 0 auto;\"></p>\n<p><img src=\"/images/vuejs-component-with-css-framework/input.png\" alt=\"text fieldとbuttonの組み合わせ（入力あり）\" style=\"max-width: 320px; margin: 0 auto;\"></p>\n<h2 id=\"Material_Components_をプロジェクトに導入する\">Material Components をプロジェクトに導入する</h2><p>導入に関してはサイトの<a href=\"https://material.io/develop/web/docs/getting-started/\">Getting Started</a>のページに書かれています。</p>\n<p>今回は Vue CLI v3 で作成したプロジェクトに Material Components を導入するための最低限の方法を紹介します。</p>\n<h3 id=\"インストール\">インストール</h3><p>Material Components はコンポーネント単位でインストールできます。</p>\n<p>今回使うのは Button と Text Field だけなので 2 つだけインストールします。</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-variable\">$ </span>yarn add <span class=\"hljs-variable\">@material</span>/button <span class=\"hljs-variable\">@material</span>/textfield\n</code></pre>\n<h3 id=\"SASS\">SASS</h3><p>Material Components は SASS で書かれています。\nそのため SASS のファイルを直接 style ブロックで読み込むことで Vue.js のコンポーネントにスタイルを当てることができます。</p>\n<p>style ブロックで読み込むために<code>vue.config.js</code>で SASS の includePaths の設定をします。\nこれを設定しないと node_modules から scss の読み込みがうまくいきません。</p>\n<p>Vue CLI で作成たプロジェクトは<a href=\"https://cli.vuejs.org/config/#css-loaderoptions\">css.loaderOptions</a>を使い各 loader の設定を拡張できます。\n今回は includePaths の設定のついでに SASS の変数ファイルを style ブロックで自動的に読み込んでくれるようにもしています。</p>\n<pre><code class=\"hljs lang-JavaScript\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n\n<span class=\"hljs-keyword\">const</span> SRC_DIR = path.resolve(__dirname, <span class=\"hljs-string\">'src'</span>);\n<span class=\"hljs-keyword\">const</span> SCSS_DIR = path.join(SRC_DIR, <span class=\"hljs-string\">'assets'</span>, <span class=\"hljs-string\">'scss'</span>);\n\n<span class=\"hljs-keyword\">const</span> SASS_AUTO_IMPORTS = <span class=\"hljs-string\">`\n@import \"<span class=\"hljs-subst\">${path.join(SCSS_DIR, <span class=\"hljs-string\">'_variables.scss'</span>)}</span>\";\n`</span>;\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">css</span>: {\n    <span class=\"hljs-attr\">loaderOptions</span>: {\n      <span class=\"hljs-attr\">sass</span>: {\n        <span class=\"hljs-attr\">data</span>: SASS_AUTO_IMPORTS,\n        <span class=\"hljs-attr\">includePaths</span>: [<span class=\"hljs-string\">'./node_modules'</span>],\n      },\n    },\n  },\n};\n</code></pre>\n<p>以上がプロジェクトで Material Components を使う準備です。</p>\n<h2 id=\"Button_のコンポーネント\">Button のコンポーネント</h2><p>早速 Button のコンポーネントとなる BaseButton コンポーネントを作ります。\nコンポーネント単位の使い方はドキュメントにまとめられています。</p>\n<p><a href=\"https://material.io/develop/web/components/buttons/\">Buttons - Material Components for the Web</a></p>\n<p>簡単な流れとしては次のような感じです。</p>\n<ol>\n<li>HTML マークアップ（template ブロック）</li>\n<li>SASS 読み込み（style ブロック）</li>\n<li>必要であれば JavaScript 読み込み（script ブロック）</li>\n</ol>\n<p>先に完成したコードを載せて、その後に次の点にフォーカスを当てて解説します。</p>\n<ul>\n<li><a href=\"#見た目のバリエーション\">見た目のバリエーション</a></li>\n<li><a href=\"#ライフサイクルに合わせた初期化と破棄\">ライフサイクルに合わせた初期化と破棄</a></li>\n<li><a href=\"#見た目のカスタマイズ\">見た目のカスタマイズ</a></li>\n</ul>\n<pre><code class=\"hljs lang-HTML\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>\n    <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"button\"</span>\n    <span class=\"hljs-attr\">:type</span>=<span class=\"hljs-string\">\"type\"</span>\n    <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">\"{\n      'mdc-button--raised': raised,\n      'base-button--raised': raised,\n      'mdc-button--unelevated': unelevated,\n      'base-button--unelevated': unelevated,\n      'mdc-button--outlined': outlined,\n      'base-button--outlined': outlined,\n    }\"</span>\n    <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"mdc-button base-button\"</span>\n    @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"handleClick\"</span>\n  &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { MDCRipple } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@material/ripple'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'BaseButton'</span>,\n\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">type</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>,\n      <span class=\"hljs-attr\">default</span>: <span class=\"hljs-string\">'button'</span>,\n    },\n\n    <span class=\"hljs-attr\">raised</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Boolean</span>,\n      <span class=\"hljs-attr\">default</span>: <span class=\"hljs-literal\">false</span>,\n    },\n\n    <span class=\"hljs-attr\">unelevated</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Boolean</span>,\n      <span class=\"hljs-attr\">default</span>: <span class=\"hljs-literal\">false</span>,\n    },\n\n    <span class=\"hljs-attr\">outlined</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Boolean</span>,\n      <span class=\"hljs-attr\">default</span>: <span class=\"hljs-literal\">false</span>,\n    },\n  },\n\n  data() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">mdc</span>: <span class=\"hljs-literal\">null</span>,\n    };\n  },\n\n  mounted() {\n    <span class=\"hljs-keyword\">this</span>.initializeMDC();\n  },\n\n  beforeDestroy() {\n    <span class=\"hljs-keyword\">this</span>.destroyMDC();\n  },\n\n  <span class=\"hljs-attr\">methods</span>: {\n    initializeMDC() {\n      <span class=\"hljs-keyword\">this</span>.mdc = MDCRipple.attachTo(<span class=\"hljs-keyword\">this</span>.$refs.button);\n    },\n\n    destroyMDC() {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.mdc !== <span class=\"hljs-literal\">null</span>) {\n        <span class=\"hljs-keyword\">this</span>.mdc.destroy();\n      }\n    },\n\n    handleClick(evt) {\n      <span class=\"hljs-keyword\">this</span>.$emit(<span class=\"hljs-string\">'click'</span>, evt);\n    },\n  },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"scss\"</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"undefined\">\n@import '@material/button/mdc-button';\n\n.base-button {\n  @include mdc-button-ink-color($color-vue);\n  @include mdc-states($color-vue);\n  line-height: 1;\n}\n\n.base-button--raised,\n.base-button--unelevated {\n  @include mdc-button-container-fill-color($color-vue);\n  @include mdc-button-ink-color(white);\n  @include mdc-states(white);\n}\n\n.base-button--outlined {\n  @include mdc-button-outline-color($color-vue);\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></pre>\n<h3 id=\"見た目のバリエーション\">見た目のバリエーション</h3><p>Button コンポーネントにはいくつかの<a href=\"https://material.io/develop/web/components/buttons/#style-customization\">バリエーション</a>が存在します。</p>\n<p>今回は次の 3 つのバリエーションに対応させています。</p>\n<ul>\n<li>raised</li>\n<li>unelevated</li>\n<li>outlined</li>\n</ul>\n<p>Material Components は BEM で書かれており、バリエーションは <code>mdc-button--raised</code> のようなクラスで提供されています。\nこのバリエーションのクラスを props の値によって切り替わるようにします。</p>\n<p>props は <code>type: Boolean</code> でバリエーションと同じ名前のものを記述します。\nBoolean を指定することで次のように属性に props 名と同じ属性を指定すると true になる props を作れます。</p>\n<pre><code class=\"hljs \"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BaseButton</span> <span class=\"hljs-attr\">raised</span>&gt;</span>浮き上がったボタン<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">BaseButton</span>&gt;</span>\n</code></pre><p>props には boolean の値がくるようになったので、後は class 属性をバインドさせて、クラスの出し分けをするだけでバリエーションに対応できます。\nclass 属性は Object をバインドさせると、値が truthy のときにそのプロパティ名のクラスが有効になります。</p>\n<h3 id=\"ライフサイクルに合わせた初期化と破棄\">ライフサイクルに合わせた初期化と破棄</h3><p>SPA のプロジェクトの場合は画面がリロードされないので、イベントの管理が重要になります。\nBaseButton ではリップル（クリックやタップしたときの波紋のようなエフェクト）をつけています。</p>\n<p>リップルはイベントを直接 DOM に付与します。\nそのため DOM が破棄されるときにイベントもしっかり削除する必要があります。</p>\n<p>基本的には、Material Components のイベントを <em>mounted</em> で 付与し、 <em>beforeDestroy</em> で破棄します。\nこれを徹底しておかないとメモリリークの危険性があります。\nMaterial Components に限らず、他のフレームワークや Swiper などのライブラリでも発生しうるので、イベントが自動で付与されるものを利用する際は注意しましょう。</p>\n<p>また、<code>MDCRipple.attachTo()</code> の引数には Element を渡す必要があります。\n<code>querySelector()</code> を使って渡してもよいのですが、Vue.js では ref を使うことで手軽に参照できるので ref を使って渡すと楽です。\n確実にコンポーネントの element を渡すことができます。</p>\n<p>※<code>querySelector()</code>などを使う場合は判別のために id を付与して確実に対象の element を取得しなければならないので少し手間となります。</p>\n<h3 id=\"見た目のカスタマイズ\">見た目のカスタマイズ</h3><p>Material Components には見た目をカスタマイズするための SASS の Mixin が用意されています。\nコンポーネントの SASS をインポートしておけば使えるようになります。</p>\n<p>提供されている Mixin はコンポーネントのドキュメントの Sass Mixins のセクションに書かれているので使う際は一度目を通しておくとスムーズに作業が進むかもしれないません。</p>\n<p><a href=\"https://material.io/develop/web/components/buttons/#sass-mixins\">https://material.io/develop/web/components/buttons/#sass-mixins</a></p>\n<h4 id=\"クラスを分けて拡張している理由\">クラスを分けて拡張している理由</h4><p>定義しているところを明確にするためです。\nmdc-button クラスで拡張しても反映されますが、dev tools などで見たときに、パッと見で自分たちが定義しているかどうかがわかるので個人的にはフレームワークで使われているクラス名と分けるようにしています。</p>\n<h2 id=\"Text_Field_のコンポーネント\">Text Field のコンポーネント</h2><p>次に Text Field のコンポーネントである BaseTextField コンポーネントを作ります。</p>\n<p><a href=\"https://material.io/develop/web/components/input-controls/text-field/\">Text Field - Material Components for the Web</a></p>\n<p>作る流れは Button のコンポーネントと同様です。\nまた解説も同様に先に完成したコードを載せて、その後に次の点にフォーカスを当てて解説します。\nライフサイクルに関しての処理は Text Field でも必要です。</p>\n<ul>\n<li><a href=\"#v-model（カスタム_input）\">v-model（カスタム input）</a></li>\n<li><a href=\"#input_タグの属性リレー\">input タグの属性リレー</a></li>\n<li><a href=\"#id_の重複回避\">id の重複回避</a></li>\n</ul>\n<pre><code class=\"hljs lang-HTML\">&lt;template&gt;\n  &lt;div ref=<span class=\"hljs-string\">\"textField\"</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">mdc</span>-<span class=\"hljs-title\">text</span>-<span class=\"hljs-title\">field</span> <span class=\"hljs-title\">base</span>-<span class=\"hljs-title\">text</span>-<span class=\"hljs-title\">field</span>\"&gt;</span>\n    &lt;input\n      :id=<span class=\"hljs-string\">\"id\"</span>\n      v-model=<span class=\"hljs-string\">\"model\"</span>\n      v-bind=<span class=\"hljs-string\">\"props\"</span>\n      <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">mdc</span>-<span class=\"hljs-title\">text</span>-<span class=\"hljs-title\">field__input</span>\"</span>\n    /&gt;\n    &lt;label :<span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">\"id\"</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">mdc</span>-<span class=\"hljs-title\">floating</span>-<span class=\"hljs-title\">label</span>\"&gt;&lt;<span class=\"hljs-type\">slot /</span>&gt;&lt;<span class=\"hljs-type\">/label</span>&gt;</span>\n    &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">mdc</span>-<span class=\"hljs-title\">line</span>-<span class=\"hljs-title\">ripple</span>\" /&gt;</span>\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n<span class=\"hljs-keyword\">import</span> { MDCTextField } from <span class=\"hljs-string\">'@material/textfield'</span>;\n<span class=\"hljs-keyword\">import</span> { vueUidMixin } from <span class=\"hljs-string\">'vue-uid'</span>;\n\nexport <span class=\"hljs-keyword\">default</span> {\n  mixins: [vueUidMixin],\n\n  inheritAttrs: <span class=\"hljs-literal\">false</span>,\n\n  props: {\n    value: {\n      type: String,\n      required: <span class=\"hljs-literal\">true</span>,\n    },\n\n    type: {\n      type: String,\n      <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-string\">'text'</span>,\n    },\n  },\n\n  <span class=\"hljs-keyword\">data</span>() {\n    <span class=\"hljs-keyword\">return</span> {\n      mdc: <span class=\"hljs-literal\">null</span>,\n    };\n  },\n\n  computed: {\n    id() {\n      <span class=\"hljs-keyword\">return</span> `base-text-field-${<span class=\"hljs-keyword\">this</span>.$_uid}`;\n    },\n\n    props() {\n      <span class=\"hljs-keyword\">return</span> {\n        ...<span class=\"hljs-keyword\">this</span>.$props,\n        ...<span class=\"hljs-keyword\">this</span>.$attrs,\n      };\n    },\n\n    model: {\n      <span class=\"hljs-keyword\">set</span>(value) {\n        <span class=\"hljs-keyword\">this</span>.$emit(<span class=\"hljs-string\">'input'</span>, value);\n      },\n      <span class=\"hljs-keyword\">get</span>() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.value;\n      },\n    },\n  },\n\n  mounted() {\n    <span class=\"hljs-keyword\">this</span>.initializeMDC();\n  },\n\n  beforeDestroy() {\n    <span class=\"hljs-keyword\">this</span>.destroyMDC();\n  },\n\n  methods: {\n    initializeMDC() {\n      <span class=\"hljs-keyword\">this</span>.mdc = MDCTextField.attachTo(<span class=\"hljs-keyword\">this</span>.$refs.textField);\n    },\n\n    destroyMDC() {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.mdc !== <span class=\"hljs-literal\">null</span>) {\n        <span class=\"hljs-keyword\">this</span>.mdc.destroy();\n      }\n    },\n  },\n};\n&lt;/script&gt;\n\n&lt;style lang=<span class=\"hljs-string\">\"scss\"</span> scoped&gt;\n<span class=\"hljs-meta\">@import</span> <span class=\"hljs-string\">'@material/textfield/mdc-text-field'</span>;\n\n.base-text-field {\n  <span class=\"hljs-meta\">@include</span> mdc-text-field-label-color($color-vue);\n  <span class=\"hljs-meta\">@include</span> mdc-text-field-caret-color($color-vue);\n  <span class=\"hljs-meta\">@include</span> mdc-text-field-fill-color(transparent);\n  <span class=\"hljs-meta\">@include</span> mdc-text-field-hover-bottom-line-color($color-vue);\n  <span class=\"hljs-meta\">@include</span> mdc-text-field-line-ripple-color($color-vue);\n}\n&lt;/style&gt;\n</code></pre>\n<h3 id=\"v-model（カスタム_input）\">v-model（カスタム input）</h3><p>カスタム input はけっこう知られてきてるかもしれませんが、一応解説を入れておきます。\nドキュメントは次のページです。</p>\n<p><a href=\"https://vuejs.org/v2/guide/components.html#Using-v-model-on-Components\">Components Basics — Vue.js</a></p>\n<p>まずは v-model 自体の解説ですが、言葉で説明するよりもコードを見せたほうが早いです。\nv-model を分解すると次のようになります。</p>\n<p>このような v-model があると</p>\n<pre><code class=\"hljs \">&lt;<span class=\"hljs-selector-tag\">input</span> v-model=<span class=\"hljs-string\">\"searchText\"</span>&gt;\n</code></pre><p>これと同じ意味になります。</p>\n<pre><code class=\"hljs \">&lt;<span class=\"hljs-keyword\">input</span>\n  v-bind:value=<span class=\"hljs-string\">\"searchText\"</span>\n  v-<span class=\"hljs-keyword\">on</span>:<span class=\"hljs-keyword\">input</span>=<span class=\"hljs-string\">\"searchText = $event.target.value\"</span>\n&gt;\n</code></pre><p>値のバインドとイベントの emit を行っているだけです。</p>\n<p>そのため、これと同じような動きを書けば自分で作ったコンポーネントでも v-model が使えるようになります。</p>\n<p>ポイントは次の 3 点です。</p>\n<ul>\n<li>props に value を定義</li>\n<li>model を computed に定義（model のところは好きな名前で大丈夫です）<ul>\n<li>get で props の value を参照</li>\n<li>set で input のイベントを emit</li>\n</ul>\n</li>\n<li>input タグに <code>v-model=&quot;model&quot;</code> を追加</li>\n</ul>\n<p>これだけを抑えておくと、BaseTextField コンポーネントは次のように v-model で値をバインドできます。</p>\n<pre><code class=\"hljs lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BaseTextField</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"value\"</span>&gt;</span>ラベル<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">BaseTextField</span>&gt;</span>\n</code></pre>\n<h3 id=\"input_タグの属性リレー\">input タグの属性リレー</h3><p>BaseTextField コンポーネントを使うときに属性を付けたいというケースは、基本的に input タグに属性を付けたいという場合だと思います。</p>\n<p>たとえば次のように maxlength を付けたい場合などです。</p>\n<pre><code class=\"hljs lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BaseTextField</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"value\"</span> <span class=\"hljs-attr\">maxlength</span>=<span class=\"hljs-string\">\"10\"</span>&gt;</span>ラベル<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">BaseTextField</span>&gt;</span>\n</code></pre>\n<p>そのままだと BaseTextField コンポーネントの境界である div タグに maxlength 属性が付いてしまいます。\nもちろん Vue.js ではこのようなケースに対応するための option として<code>inheritAttrs</code>が用意されています。</p>\n<p><a href=\"https://vuejs.org/v2/api/#inheritAttrs\">https://vuejs.org/v2/api/#inheritAttrs</a></p>\n<p>inheritAttrs オプションを使うと <code>$attrs</code> が使えるようになります。\n<code>$attrs</code> には親から渡された属性が object で入っています。\nこれを input タグに渡してあげれば maxlength を中の input タグに付けることができます。</p>\n<p>渡し方ですが、input タグには props の type も一緒に渡してあげたいです（type に default 値として text を入れたいため props に定義しています）。\nv-bind ディレクティブに object を渡すことでまとめてバインドできます。\n<code>$props</code> と <code>$attrs</code> をまとめて渡してあげれば、雑ですが適切に目的のタグに対して属性をバインドさせられます。</p>\n<p>その該当箇所だけ抜き出すとこのようになります。</p>\n<pre><code class=\"hljs lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-bind</span>=<span class=\"hljs-string\">\"props\"</span> /&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> /&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">inheritAttrs</span>: <span class=\"hljs-literal\">false</span>,\n\n    <span class=\"hljs-attr\">props</span>: {\n      <span class=\"hljs-attr\">type</span>: {\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>,\n        <span class=\"hljs-attr\">default</span>: <span class=\"hljs-string\">\"text\"</span>\n      }\n    },\n\n    <span class=\"hljs-attr\">computed</span>: {\n      props() {\n        <span class=\"hljs-keyword\">return</span> {\n          ...this.$props,\n          ...this.$attrs\n        };\n      }\n    }\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<h3 id=\"id_の重複回避\">id の重複回避</h3><p>この問題は id を持つコンポーネントを複数箇所で使った場合に発生します。\nこの問題と解消手段については別途記事を書いているのでそちらをご覧ください（自分で作った vue-uid っていうプラグインの宣伝）。</p>\n<p><a href=\"https://mya-ake.com/posts/release-info-vue-uid/\">vue-uid というコンポーネントで使えるユニーク ID を持たせるプラグインを作った - mya-ake com</a></p>\n<h2 id=\"まとめ\">まとめ</h2><p>ざっくり Button と Text Field を例に Material Components を導入する方法を記事にしました。\nきれいに導入するには Vue.js に関する知識がいろいろ必要になってきます。\nVue.js の学習をする際に CSS フレームワークと組み合わせてみるというのはいい題材になるのではと個人的に思いました。</p>\n<p>実はこの記事は技術書典 5 で書いた<a href=\"https://neko-note-help.booth.pm/items/1029866\">Try PWA</a>の 5 章の内容の一部です。\nこの Try PWA 自体は PWA の本なのですが、サンプルを作る上で Vue.js と Material Components を組み合わせるノウハウなどが出てきたのでおまけ的な章として一緒に入れてしまう予定でした。\n予定でしたとある通り、まあ間に合いませんでしたごめんなさい 🙇‍\n現在執筆中で今回例に上げた Button と Text Field 以外のコンポーネントもいくつか追加で解説予定です（Vue.js と組み合わせて面白そうなコンポーネント）。\n今は年末セールと言う形で筆者のサークル neko-note の一部同人誌が 20 % OFF となっているので、ご興味ある方はぜひご購入いただいて更新をお待ちください 🙏</p>\n<p>ストアはこちら -&gt; <a href=\"https://neko-note-help.booth.pm\">neko-note - BOOTH</a></p>\n<p>補足として下部にいくつかコラム的なものを載せているのでご興味ある方はそちらもご覧ください。</p>\n<h2 id=\"リンク集\">リンク集</h2><ul>\n<li><a href=\"https://github.com/material-components/material-components-web/blob/master/docs/integrating-into-frameworks.md\">material-components-web/integrating-into-frameworks.md at master · material-components/material-components-web</a><ul>\n<li>Material Components をフレームワークに導入するときの方法などが書かれています</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"補足\">補足</h2><h3 id=\"コンポーネント化したライブラリはすでに存在する\">コンポーネント化したライブラリはすでに存在する</h3><p>実は Material Components を Vue.js 用にラップしたサードパーティ製のライブラリが存在しています。\nMaterial Components を Vue.js で使う際はこちらの利用も検討されるとよいかもしれません。</p>\n<p><a href=\"https://github.com/matsp/material-components-vue\">matsp/material-components-vue: Material Design styled components for Vue.js</a></p>\n<h3 id=\"どのような_CSS_フレームワークならコンポーネント化することができるのか\">どのような CSS フレームワークならコンポーネント化することができるのか</h3><p>SASS でコンポーネント単位で作られているフレームワークであれば比較的簡単に導入できます。\nBootstrap もパット見 mixin の import 周りの手間がありそうですが、導入できそうな雰囲気です（試してはないです）。</p>\n<p>また最近、<a href=\"https://twitter.com/Qrac_JP\">クラク</a>さんが作られている CSS フレームワーク「<a href=\"https://musubii.qranoko.jp\">MUSUBii</a>」を<a href=\"https://twitter.com/sho_yamane\">山根 翔</a>さんが Vue.js のライブラリ<a href=\"https://github.com/sho-yamane/vue-bento\">VueBento</a>にするということで少しお手伝いさせていただきました。</p>\n<p>このように使われている CSS フレームワークであればサードパーティ製のライブラリとして作られている可能性が高いです。\nMaterial Components もそうでしたが一度探してみてはいかがでしょうか？</p>\n<p>もしライブラリの API が合わない場合や処理を最適化したい（汎用的にであるがゆえに処理が多くなりがちなので）という場合は自身で CSS フレームワークからコンポーネントを作ってみるとよいかもしれません。</p>\n<h3 id=\"サンプルコードに含まれる_docs_ブロック\">サンプルコードに含まれる docs ブロック</h3><p>これは筆者が作成中の VuePress をコンポーネントカタログとして使うための記述です。\n導入に挫折しない &amp; メンテナンスコストを限りなく低くをコンセプトに開発しています。</p>\n<p><a href=\"https://github.com/mya-ake/vuepress-plugin-component-catalog\">mya-ake/vuepress-plugin-component-catalog: Generating a component catalog of Vue.js</a></p>\n<p>1/30 に行う<a href=\"https://v-fukuoka.connpass.com/event/113123/\">Vue Night in Fukuoka #2</a>でこのプラグインの話の予定です。\nまだまだ課題は多いですがそれまでに今よりいい感じにすべく頑張っていきます 💪</p>","thumbnail":"","twitterCardType":"","createdAt":"2018-12-20"}