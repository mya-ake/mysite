{"title":"Nuxt.js on AWS Lambda with Serverless Framework","description":"Vue.js のユニバーサルアプリケーションを作るためのフレームワークである Nuxt.js を AWS Lambda で動かす方法について書かれている記事です。","body":"<h2 id=\"この記事について\">この記事について</h2><p>この記事は<a href=\"https://qiita.com/advent-calendar/2017/vue2\">Vue.js #2 Advent Calendar 2017 - Qiita</a>の 12 日目の記事です。</p>\n<p>この記事では <a href=\"https://nuxtjs.org/\">Nuxt.js</a>（v2.6.2）を <a href=\"https://aws.amazon.com/jp/lambda/\">AWS Lambda</a> で動かす方法について書いています。\nNuxt.js に関する説明もありますが、全体的にサーバー構築寄りの内容になっています。<br>しかし、Node.js で AWS にデプロイまでできる <a href=\"https://serverless.com/\">Serverless Framework</a> というツールを利用しており、<a href=\"https://github.com/mya-ake/nuxt-on-lambda\">サンプルコード</a> の npm scripts を実行するだけで AWS 上に環境を作れるようにしています。（AWS への登録と Credential の生成は必要です）\nご興味のある方はそちらも参照してみてください。</p>\n<p>また、先に断っておくとこの記事では API Gateway をエンドポイントとします。\nAPI Gateway をエンドポイントする理由は待ち時間が少なく手軽に動作確認ができるからです。\n（一応サンプルコードはカスタムドメインにも対応しています）</p>\n<p>今回は上に挙げた登場人物?たちについて簡単に説明し、なぜ SSR するのか、なぜ Lambda なのかという話もして、AWS の構成や動かすための実装コードの説明していくという盛りだくさんな内容になっています。</p>\n<p>※この記事ではパッケージマネージャーに <a href=\"https://yarnpkg.com/ja/\">yarn</a> を使っていますが、\nnpm でも問題はないはずです。（すいません、npm は試してないです。</p>\n<h3 id=\"注意事項_Nuxt.js_のバージョンについて\">注意事項 Nuxt.js のバージョンについて</h3><p><del>この記事で扱っている Nuxt.js のバージョンは <strong>v1.0.0-rc11</strong> です。\n2018/01/09 にリリースされた v1.0.0 には対応していません。\n理由は v1.0.0 は Node.js のバージョンが v8.0.0 以上を対象としており、AWS Lambda のランタイムに存在しないバージョンだからです。<br>早く AWS Lambda に Node.js v8.x が追加されることを心待ちにしています。</del></p>\n<h6 id=\"2018/05/12_追記\">2018/05/12 追記</h6><p>AWS Lambda に Node.js v8.10 が入ったので、更新して再び使えるようにしました！</p>\n<h6 id=\"2018/11/19_追記\">2018/11/19 追記</h6><p>Nuxt.js v2.3.1 対応した記事に更新しました！</p>\n<h6 id=\"2019/04/18_追記\">2019/04/18 追記</h6><p>Nuxt.js v2.6.2 対応した記事に更新しました！\nまた<a href=\"#Nuxt.js_%E3%82%92_Lambda_%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%99%E9%9A%9B%E3%81%AE%E7%90%86%E6%83%B3%E3%81%AE%E8%A9%B1\">Nuxt.js を Lambda で動かす際の理想の話</a>の話を同人誌として出してました。BOOTH にて販売しているのでご興味ある方はそちらをご参照ください。</p>\n<p>主な内容はデプロイに関してです。Lambda にデプロイしつつ、S3 に静的リソースをデプロイして、CloudFront で配信するというものです。\n本番運用に関する tips も載ってるので、気になるものがありましたらご購入いただけると嬉しいです。</p>\n<p>BOOTHの販売ページ：<a href=\"https://neko-note-help.booth.pm/items/1317543\">https://neko-note-help.booth.pm/items/1317543</a></p>\n<h3 id=\"対象読者\">対象読者</h3><ul>\n<li>Vue.js の SSR（サーバーサイドレンダリング）に興味がある方</li>\n<li>Nuxt.js をどういうサーバーで稼働させようか考えている方</li>\n<li>AWS Lambda を検討している方</li>\n</ul>\n<h3 id=\"登場人物?たち\">登場人物?たち</h3><ul>\n<li>Nuxt.js</li>\n<li>AWS Lambda</li>\n<li>Serverless Framework</li>\n</ul>\n<h3 id=\"サンプルコード\">サンプルコード</h3><ul>\n<li><a href=\"https://github.com/mya-ake/nuxt-on-lambda\">GitHub</a></li>\n</ul>\n<h3 id=\"アウトライン\">アウトライン</h3><ul>\n<li><a href=\"#Nuxt.js\">Nuxt.js</a></li>\n<li><a href=\"#AWS_Lambda\">AWS Lambda</a></li>\n<li><a href=\"#Serverless_Framework\">Serverless Framework</a></li>\n<li><a href=\"#%E3%81%AA%E3%81%9C_SSR%EF%BC%9F%E3%81%AA%E3%81%9C_Lambda%EF%BC%9F\">なぜ SSR？ なぜ Lambda？</a></li>\n<li><a href=\"#%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E6%A7%8B%E6%88%90%E3%82%84%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E6%A7%8B%E6%88%90\">サーバー構成やフォルダ構成</a><ul>\n<li><a href=\"#%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E6%A7%8B%E6%88%90\">サーバー構成</a></li>\n<li><a href=\"#%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E6%A7%8B%E6%88%90\">フォルダ構成</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AE%9F%E8%A3%85%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E8%AA%AC%E6%98%8E\">実装コードの説明</a><ul>\n<li><a href=\"#%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E5%81%B4_-_Nuxt.js\">フロントエンド側 - Nuxt.js</a></li>\n<li><a href=\"#%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E5%81%B4_-_Lambda\">サーバー側 - Lambda</a></li>\n</ul>\n</li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83%E8%A8%98%E4%BA%8B%E9%9B%86\">参考記事集</a></li>\n<li><a href=\"#%E8%A3%9C%E8%B6%B3\">補足</a><ul>\n<li><a href=\"#Nuxt.js_%E3%82%92_Lambda_%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%99%E9%9A%9B%E3%81%AE%E7%90%86%E6%83%B3%E3%81%AE%E8%A9%B1\">Nuxt.js を Lambda で動かす際の理想の話</a></li>\n<li><a href=\"#%E3%81%AA%E3%81%9C_Lambda_%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E5%B0%8F%E3%81%95%E3%81%8F%E3%81%99%E3%82%8B%E3%81%AE%E3%81%8B%EF%BC%9F\">なぜ Lambda のデプロイパッケージを小さくするのか？</a></li>\n<li><a href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89\">サンプルコードのデプロイコマンド</a></li>\n</ul>\n</li>\n</ul>\n<p><div class=\"content__ad\">\n    <ins class=\"adsbygoogle\"\n    style=\"display:block; text-align:center;\"\n    data-ad-layout=\"in-article\"\n    data-ad-format=\"fluid\"\n    data-ad-client=\"ca-pub-9428775704052737\"\n    data-ad-slot=\"2502459394\"></ins>\n    </div></p>\n<h2 id=\"Nuxt.js\">Nuxt.js</h2><p>Nuxt.js は 冒頭でも書いたとおり Vue.js のユニバーサルアプリケーションを作ることができるフレームワークです。\n<del>2017 年 12 月 12 日現在はまだバージョン 1 がリリースされていませんが、現時点でも十分に扱える状態にあると思います。\n筆者自信もプロダクション環境で稼働させる準備を進めています。</del>\n筆者自身もプロダクション環境で稼働させて 1 年ぐらい経ちました。</p>\n<p>その Nuxt.js の特徴を挙げると次のような感じです。</p>\n<ul>\n<li>SSR サポート</li>\n<li>整った開発環境<ul>\n<li>Babel</li>\n<li>ローカルサーバー（ホットリロード有り）</li>\n</ul>\n</li>\n<li>静的サイトジェネレーター</li>\n</ul>\n<p>とりあえずすごく便利です。\n開発を始めるまでのハードルがすごく低くなっています。\n<del>また、公式が用意している<a href=\"https://github.com/nuxt-community/starter-template\">スターターテンプレート</a>を使うことで ESLint の設定まで含まれた状態で始めることもできます。</del>\nまた、Nuxt.js 公式で出している <a href=\"https://github.com/nuxt/create-nuxt-app\">create-nuxt-app</a> を使うことで、さまざまな環境を自動で生成してくれます。\nたとえば、UI フレームワークの <a href=\"https://element.eleme.io/\">element-ui</a> や <a href=\"https://vuetifyjs.com/\">Vuetify</a> などの環境をセットアップした状態で始めることもできます。</p>\n<p>このサイト自体も Nuxt.js を利用して制作しています。\nまだ開発途中で前に作ったサイトと同居状態なのですが、Nuxt.js の静的サイトジェネレーターの機能を使い、このページだけ独立した HTML として出力させてサーバーに置いています。</p>\n<p>今回の主題は Nuxt.js ではないので、紹介はこの程度に留めます。\nNuxt.js についてさらに知りたい方は <a href=\"https://twitter.com/potato4d\">potato4d</a>さんの<a href=\"https://www.amazon.co.jp/dp/4863542569\">Nuxt.js ビギナーズガイド―Vue.js ベースのフレームワークによるシングルページアプリケーション開発</a>に詳しく書かれているので、そちらをご参照いただくことをオススメします。筆者もレビュワーとしてお手伝いさせていただきました。</p>\n<h2 id=\"AWS_Lambda\">AWS Lambda</h2><p>AWS Lambda はサーバーレスと言われる分野で使われている代表的なサービスです。\n使った分だけ課金される AWS のコンピューティングサービスです。FaaS (Function as a Service) とも呼ばれたりします。\nコードをアップするだけで稼働し、スケーリングも自動で行われるので、サーバーの管理を煩わしく思うような人にオススメです。</p>\n<p>Node.js や Python、Java などさまざまな ランタイムがあり、自分のやりやすい言語を選択して利用できます。\n<del>最近ラスベガスで行われた AWS re:Invent 2017 では、Go 言語 と .NET Core が使えるようになると発表があり今後も使える言語は増えることが予想されます。</del> Go 言語 と .NET Core はすでに使えます。<br>今回は Nuxt.js を動かしたいのでランタイムは Node.js（v8.10）を使います。</p>\n<h2 id=\"Serverless_Framework\">Serverless Framework</h2><p>Serverless Framework は AWS Lambda へのデプロイを手軽に行えるようにしてくれるツールです。\nNode.js の環境があれば動かすことができるので、Nuxt.js を使う環境であればすぐに導入できると思います。\nまた、コードベース（yml ファイル）で設定を管理できるので、同じ環境を作るのも手軽にできます。\n今回の設定などは <a href=\"https://github.com/mya-ake/nuxt-on-lambda\">GitHub</a>に置いているので、ほぼそのまま使うことができると思います。</p>\n<h2 id=\"なぜ_SSR？なぜ_Lambda？\">なぜ SSR？なぜ Lambda？</h2><p>なぜ SSR するか、なぜ Lambda を使うかという話は、<a href=\"https://serverless.connpass.com/event/62473/\">Serverless Meetup Fukuoka #1</a>というイベントで『<a href=\"https://mya-ake.com/slides/vuejs-ssr-on-lambda\">AWS Lambda で SSR やってみた Vue.js 編</a>』という LT をしてきたので、そちらをご覧いただけると幸いです。</p>\n<p>ざっくりなぜ SSR するかをまとめると</p>\n<ul>\n<li>Googlebot に正しくサイトを認識してもらうため</li>\n<li>ファーストビューの速度改善</li>\n<li>OGP への対応</li>\n</ul>\n<p>ざっくりなぜ Lambda を使うかをまとめると</p>\n<ul>\n<li>１リクエストで１ Lambda が動くので、突発的なアクセスなどに強い</li>\n<li>サーバーの管理をあまりしたくない</li>\n<li>安い</li>\n</ul>\n<p>以上のような理由です。\n筆者の場合はサーバーも自分で用意したりするので、管理を AWS に任せられるので重宝しています。</p>\n<h2 id=\"サーバー構成やフォルダー構成\">サーバー構成やフォルダー構成</h2><h3 id=\"サーバー構成\">サーバー構成</h3><p>今回はこのような構成で作成します。\nLambda で Nuxt.js を動かし、API Gateway 経由で公開します。</p>\n<p><img src=\"/images/nuxtjs-on-aws-lambda/api_gw_architecture.svg\" alt=\"API Gateway 経由で Lambda にアクセスしている図\" draggable=\"false\"></p>\n<p>AWS の設定などは面倒なので、Serverless Framework でやってしまいます。\nサンプルコードでは次のコマンドで AWS 側の設定まで含んだデプロイが完了するようになっています。</p>\n<pre><code class=\"hljs \"><span class=\"hljs-variable\">$ </span>yarn <span class=\"hljs-symbol\">deploy:</span>api_gw</code></pre><p>※<code>serverless.yml</code> というファイルが Serverless Framework の設定ファイルになっています。\nそのファイルで Credential の設定も行っていますので、ご自身の環境に合わせていただく必要はあります。<br><code>serverless.yml</code> にもコメントを残しているので、そちらも合わせてご参照ください。</p>\n<h3 id=\"フォルダ構成\">フォルダ構成</h3><p>大まかに次のようになっています。</p>\n<pre><code class=\"hljs \">project_root/           <span class=\"hljs-meta\"># プロジェクトのルートフォルダ</span>\n  ├ app/                   <span class=\"hljs-meta\"># フロントエンド側のソースフォルダ（Nuxt.js）</span>\n  ├ configs/             <span class=\"hljs-meta\"># 環境変数などを入れるフォルダ</span>\n  ├ <span class=\"hljs-keyword\">server</span>/               <span class=\"hljs-meta\"># \bサーバー側のソースフォルダ（Lambda）</span>\n  ├ nuxt.config.js     <span class=\"hljs-meta\"># Nuxt.js の設定ファイル</span>\n  ├ package.json      <span class=\"hljs-meta\"># npmの設定ファイル</span>\n  ├ serverless.yml    <span class=\"hljs-meta\"># Serverless Framework の設定ファイル</span>\n  └ yarn.lock            <span class=\"hljs-meta\"># npmモジュールのバージョン管理ファイル</span></code></pre><p>メインのアプリケーションとなる Nuxt.js のフォルダーは app フォルダーにまとめています。\nまとめておくことでデプロイのパッケージから除外しやすくなるので、app フォルダーや src フォルダーなどにまとめておくことをオススメします。</p>\n<h2 id=\"実装コードの説明\">実装コードの説明</h2><p>実装コードについては２つに分けて説明していこうと思います。\n１つはフロントエンド側（Nuxt.js）、もう１つは SSR するためのサーバー側（Node.js）です。<br>※同人誌版対応でサンプルコードのリポジトリの一部コードに変更がありますが、最低限の内容はこの記事の書かれている内容になります。</p>\n<h3 id=\"フロントエンド側_-_Nuxt.js\">フロントエンド側 - Nuxt.js</h3><p>今回は create nuxt app の express 版をベースに利用しています。\nほぼそのまま利用しており <code>nuxt.config.js</code> のみ変更を加えています。</p>\n<p>変更した点は３つあり、それぞれ以下のような感じです。</p>\n<ol>\n<li>srcDir の設定</li>\n<li>Base URL の設定（base タグ設定）</li>\n<li>gzip の無効化</li>\n</ol>\n<p>1.はアプリケーションのコードを１つのフォルダーにまとめる目的です。 2.、3.は API Gateway で公開する上で必要になってきます。\nそれぞれについてもう少し深掘っていきます。</p>\n<h4 id=\"1._srcDir_の設定\">1. srcDir の設定</h4><p>srcDir を設定することで１つのフォルダーにまとめることができ、デプロイがやりやすくなります。\nまた、今回はサーバー側のコードもプロジェクトのフォルダーに存在しているため、明確に分けるという目的もあります。<br>app フォルダーにまとめる設定は簡単で、<code>nuxt.config.js</code>に<code>srcDir</code>プロパティを設定するだけでできます。</p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n  <span class=\"hljs-comment\">// 略</span>\n  srcDir: <span class=\"hljs-string\">'app/'</span>,\n  <span class=\"hljs-comment\">// 略</span>\n}</code></pre>\n<p>srcDir について: <a href=\"https://ja.nuxtjs.org/api/configuration-srcdir\">API: srcDir プロパティ - Nuxt.js</a></p>\n<p>※サーバーで稼働させる時はビルド後のコードを利用するため、自分たちで書いたコードをサーバーにデプロイする必要はありません。</p>\n<h4 id=\"2._Base_URL_の設定（base_タグ設定）\">2. Base URL の設定（base タグ設定）</h4><p>2.に関してですが、Base URL を設定しないと JS などのリソースが取得できなくなってしまいます。\nその原因は API Gateway で生成される URL と Nuxt.js のリソースのパスの出力の仕方にあります。</p>\n<p>API Gateway で公開すると URL は次のようになります。</p>\n<pre><code class=\"hljs \">http<span class=\"hljs-variable\">s:</span>//xxxxxxxxxx.<span class=\"hljs-keyword\">execute</span>-api.ap-northeast-<span class=\"hljs-number\">1</span>.amazonaws.<span class=\"hljs-keyword\">com</span>/dev/</code></pre><p>末尾についている<code>/dev/</code>のところは API Gateway のステージが入ります。\nこのステージのパスは省略ができません。\nそのため、１階層下がる前提で考える必要があります。<br>Nuxt.js では JS などのリソースのパスはルートパス（<code>/assets/app.js</code>のような書き方）で出力されます。\nこのままだと<code>https://xxxxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/assets/app.js</code>を参照してしまいリソースを取得できません。\nこれを解消するには Base URL を設定してあげる必要があります。<br>Base URL を設定すると head タグに</p>\n<pre><code class=\"hljs language-HTML\">&lt;base <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-string\">\"/dev/\"</span>&gt;</code></pre>\n<p>が追加されます。\nこれが追加されると JS のパスがルートパスで指定されていたとしても<code>https://xxxxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/dev/assets/app.js</code>を参照するようになります。<br>この Base URL の設定は、router プロパティで行えます。</p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n  <span class=\"hljs-comment\">// 略</span>\n  router: {\n    base: <span class=\"hljs-string\">'/dev/'</span>\n  },\n  <span class=\"hljs-comment\">// 略</span></code></pre>\n<p>base について: <a href=\"https://ja.nuxtjs.org/api/configuration-router#base\">API: router プロパティ - Nuxt.js</a></p>\n<p>※サンプルコードの方では Base URL の設定が不要な環境では base を設定しないようなコードになっています。</p>\n<h4 id=\"3._gzip_の無効化\">3. gzip の無効化</h4><p>※ gzip に関しての対応は不要な場合もあるようです。\n筆者の環境では Nuxt.js のバージョンに関わらず gzip がかかっていると表示されません。\nただ CloudFront を使っている場合などは CloudFront で gzip をかけられるため、Nuxt.js の gzip の機能を使う必要はないでしょう。</p>\n<p>Nuxt.js はデフォルトで gzip の機能が備わっています。\nありがたい機能ではあるのですが、このままだとブラウザで表示できなくなってしまいます。（Chrome では白い画面、 Firefox では Content-Encoding に問題があると表示されます）\n細かいところまで調べきれていないのですが、恐らく API Gateway にも gzip の機能が備わっているようです。\nそのため、2 重に gzip がかかった状態になってしまい、ブラウザがデコードできないのだと推測されます。</p>\n<p>というわけで、 Nuxt.js の gzip を無効化します。\nNuxt.js のドキュメント（<a href=\"https://ja.nuxtjs.org/api/configuration-render/#compressor\">API: The render プロパティ - Nuxt.js</a>）を見てみると独自のミドルウェアを定義できるようです。<br>ただ具体的には書いてないので、Nuxt.js のコードを覗いてみると関数を設定させると独自のミドルウェアを定義できるみたいです。（<a href=\"https://github.com/nuxt/nuxt.js/blob/68523b95bc1bc663c96f30b28425f2e4cee29c7c/packages/server/src/server.js#L71\">コードはこちら</a>）</p>\n<p>gzip の無効化は render プロパティで設定できます。</p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"hljs-keyword\">module</span>.exports = {\n  <span class=\"hljs-comment\">// 略</span>\n  render: {\n    <span class=\"hljs-comment\">// ドキュメントでは object になってるが関数を定義すると独自のミドルウェアに置き換わる</span>\n    compressor:<span class=\"hljs-function\"> (<span class=\"hljs-params\">req</span>, <span class=\"hljs-params\">res</span>, <span class=\"hljs-params\">next</span>) =&gt;</span> {\n      <span class=\"hljs-comment\">// なにもしなければ圧縮はされない</span>\n      next<span class=\"hljs-literal\">()</span>\n    }\n  },\n  <span class=\"hljs-comment\">// 略</span></code></pre>\n<p>以上がフロントエンド側のコードです。（設定を数行加えただけ）</p>\n<h3 id=\"サーバー側_-_Lambda\">サーバー側 - Lambda</h3><p>サーバー側は Nuxt.js を Lambda で動作させるために <a href=\"http://expressjs.com/ja/\">Express</a> を用います。\nなぜ Express かというと、 AWS Labs が Express を Lambda で動かすためのライブラリ <a href=\"https://github.com/awslabs/aws-serverless-express\">aws-serverless-express</a>を提供しているからです。</p>\n<p>コードの説明に入っていく前に、Lambda でのコードの実行に関しての説明を少しだけしておきます。\nLambda はイベントがトリガーとなり実行される仕組みになっています。\nそのため、Lambda のコードはハンドラーを用意するような形になります。<br>筆者が Lambda のコードを書く場合は、ハンドラーとメインの処理が書かれたコードを分けるようにしています。\n分ける理由はローカルでメインの処理だけローカルで実行して動作確認をしたり、テストをやりやすくするためです。\n今回も同様にハンドラーである<code>hander.js</code>とメインの処理である<code>app.js</code>に分けて記述しています。\nそれぞれについて書いていきます。</p>\n<h4 id=\"hander.js_-_ハンドラー\">hander.js - ハンドラー</h4><p>ハンドラーの方は短いです。\nハンドラー関数を定義して、aws-serverless-express の proxy 関数にハンドラー関数の引数を渡しているだけです。</p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"hljs-meta\">'use strict'</span>\n\n<span class=\"hljs-keyword\">const</span> awsServerlessExpress = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'aws-serverless-express'</span>)\n<span class=\"hljs-keyword\">const</span> { app } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./app'</span>)  <span class=\"hljs-comment\">// Express のインスタンス</span>\n\n<span class=\"hljs-keyword\">const</span> server = awsServerlessExpress.createServer(app)\n\n<span class=\"hljs-built_in\">module</span>.exports.handler = <span class=\"hljs-function\">(<span class=\"hljs-params\">event, context, callback</span>) =&gt;</span> {\n  awsServerlessExpress.proxy(server, event, context)\n}</code></pre>\n<h4 id=\"app.js_-_メインの処理\">app.js - メインの処理</h4><p>app.js では Express のインスタンスを生成しています。\nNuxt.js を Express で動かす場合は<code>nuxt.render</code>を使います。\n<a href=\"https://nuxtjs.org/api/nuxt-render\">API: nuxt.render(req, res) - Nuxt.js</a></p>\n<p>本来であれば Express のインスタンスに<code>nuxt.render</code>を登録するだけでよいですが、Base URL の関係で、リクエストのパスを変えてあげる必要があります。\n変えなければならない理由もまた、API Gateway です。\nAPI Gateway から Lambda に値が渡るときにステージのパスである<code>/dev/</code>が渡ってきません。\nそのため<code>nuxt.render</code>関数にに渡る前に<code>/dev/</code>を付加してあげる必要があります。</p>\n<p>※<code>/dev/</code>が入っている<code>BASE_URL</code>は環境変数として定義していて、<code>process.env</code>から取得させています。<br>※環境変数は<code>serverless.yml</code>で設定しています。</p>\n<h6 id=\"2018/11/19_追記\">2018/11/19 追記</h6><p>更新前の記事では app.js にすべてを書いていましたが、Nuxt.js v2.x 対応するときに細かく Express のミドルウェアに分けました。\nまた、ローカルでの開発時も Express のサーバーが立ち上がるようにも変更を加えました。</p>\n<p>server フォルダーの構成は次のようになります。</p>\n<pre><code class=\"hljs \">server/\n  ├ core/\n  │  └ nuxt.js                   <span class=\"hljs-comment\"># Nuxt.js のインスタンス生成や開発と本番の動作を切り替える処理</span>\n  ├ middlewares/              <span class=\"hljs-comment\"># \bExpress のミドルウェアのフォルダー</span>\n  │  ├ env-middleware.js        <span class=\"hljs-comment\"># Base URL の設定を行うミドルウェア</span>\n  │  ├ header-middleware.js   <span class=\"hljs-comment\"># デフォルトのヘッダーをカスタマイズするミドルウェア</span>\n  │  └ logger-middleware.js   <span class=\"hljs-comment\"># アクセスログを出力するミドルウェア</span>\n  ├ app.js            <span class=\"hljs-comment\"># サーバー側のメイン</span>\n  ├ handler.js      <span class=\"hljs-comment\"># AWS Lambda のハンドラー</span>\n  └ <span class=\"hljs-keyword\">local</span>.js          <span class=\"hljs-comment\"># ローカル起動用のコード</span></code></pre><p>Express のミドルウェアは登録した順に処理を実行し、次のミドルウェアに渡していくような役割を持っています。\n今回は 1 つのミドルウェアに 1 つの役割を持たせて処理を分割しました。\n中身に関してはそれぞれ大したことはしていないので<a href=\"https://github.com/mya-ake/nuxt-on-lambda/tree/master/server\">サンプルコード</a>の方をご覧ください。</p>\n<h6 id=\"2019/04/18_追記\">2019/04/18 追記</h6><p>Nuxt.js v2.5（多分）から nuxt のインスタンスの ready メソッドを呼ぶ必要があるようです。</p>\n<p>このコードから</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-selector-tag\">app</span><span class=\"hljs-selector-class\">.use</span>(<span class=\"hljs-selector-tag\">nuxt</span><span class=\"hljs-selector-class\">.render</span>);</code></pre>\n<p>このコードに更新しました。</p>\n<pre><code class=\"hljs language-js\">app.use(<span class=\"hljs-keyword\">async</span> (req, res, next) =&gt; {\n  <span class=\"hljs-keyword\">await</span> nuxt.ready();\n  nuxt.render(req, res, next);\n});</code></pre>\n<p>以上がサーバー側のコードです。</p>\n<h2 id=\"まとめ\">まとめ</h2><p>盛りなだくさんになってしまいました。\n全体を通して API Gateway が問題児に見えてしまっているかもしれません。\nまあそれはそうで、API Gateway は名前の通り API を提供することが目的であり、web サーバーとして使うことに特化しているわけではありません。\n色々めんどうな手間も仕方ないことだと割り切りましょう。</p>\n<p>しかし、カスタムドメインを使うことでめんどうな手間もほぼ解消できます。\n基本的にめんどうな手間となっていたのは、Base URL が必要だからでした。<br>Nuxt.js を Lambda で動かす上で API Gateway を経由する必要はありますが、API Gateway でもカスタムドメインを設定できますし、CloudFront を API Gateway の前に置くことでカスタムドメインを設定することもできます。\n（個人的なオススメは CloudFront です。この話は<a href=\"#Nuxt.js_%E3%82%92_Lambda_%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%99%E9%9A%9B%E3%81%AE%E7%90%86%E6%83%B3%E3%81%AE%E8%A9%B1\">理想の話</a>として補足に書いています）<br>一応サンプルではカスタムドメインを使用することも考慮して、次のコマンドを用意しています。</p>\n<pre><code class=\"hljs \"><span class=\"hljs-variable\">$ </span>yarn deploy</code></pre><p>このコマンドでデプロイした場合は Base URL が設定されなくなります。\nカスタムドメインを設定する前提の場合はこちらのコマンドを利用してください。</p>\n<h6 id=\"2019/04/18_追記\">2019/04/18 追記</h6><p>この<code>yarn deploy</code>のコマンドは<a href=\"#Nuxt.js_%E3%82%92_Lambda_%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%99%E9%9A%9B%E3%81%AE%E7%90%86%E6%83%B3%E3%81%AE%E8%A9%B1\">理想の話</a>のデプロイができるようなコマンドに更新されました。\nカスタムドメインを使う場合は理想の話の構成を参考にされてください。</p>\n<p>今回はここでいったん終わりにします。\n明日は<a href=\"https://qiita.com/sunecosuri\">sunecosuri</a>さんです。\n<del>公開されたら、この辺りにリンクを貼っておきます</del><br><a href=\"https://qiita.com/sunecosuri/items/97be9ddba332726e4fa3\">パンくずコンポーネントと範囲選択するコンポーネントについて - Qiita</a><br>クリック時に範囲選択するコンポーネントは便利だなと思いました。\nこのサイトでのコードのコピーとかに応用できたらなと思います。</p>\n<p>下に補足として、色々書いてるのでよかったら見てください。</p>\n<h2 id=\"参考記事集\">参考記事集</h2><ul>\n<li><a href=\"https://nuxtjs.org/\">Nuxt.js - Universal Vue.js Applications</a></li>\n<li><a href=\"https://aws.amazon.com/jp/lambda/\">AWS Lambda (サーバーレスでコードを実行・自動管理) | AWS</a></li>\n<li><a href=\"https://html5experts.jp/potato4d/24346/\">Vue.js 製フレームワーク Nuxt.js ではじめる Universal アプリケーション開発 | HTML5Experts.jp</a></li>\n<li><a href=\"https://mya-ake.com/slides/vuejs-ssr-on-lambda\">AWS Lambda で SSR やってみた Vue.js 編</a></li>\n</ul>\n<p><div class=\"content__ad\">\n    <ins class=\"adsbygoogle\"\n    style=\"display:block\"\n    data-ad-client=\"ca-pub-9428775704052737\"\n    data-ad-slot=\"5032208407\"\n    data-ad-format=\"auto\"></ins>\n    </div></p>\n<h2 id=\"補足\">補足</h2><p>ここからは補足的な内容になってます。</p>\n<h3 id=\"Nuxt.js_on_AWS_Lambda_の運用の話（2018/11/19_追記）\">Nuxt.js on AWS Lambda の運用の話（2018/11/19 追記）</h3><p>筆者が Nuxt.js を AWS Lambda で運用し始めて 1 年近くたったので、運用のノウハウを追記しておきます。\nといってもノウハウはほぼありません。笑<br>稼働させてから今日まで Nuxt.js のバージョンアップ以外で AWS Lambda に関連するコードの変更は行っていません。\nサーバーレスのメリットを存分に受けていると言えそうです。</p>\n<p>ただメリットだけということもありません。\nLambda はたまにとても起動が遅いこともあります。\nLambda の実行を監視していると極稀にですがレスポンスを返すのに数十秒かかるケースがあるようです。\nこればっかりはどうしようもないので素直に、CloudFront の Error Pages でタイムアウト時は静的ページを返すようにしておくのがベストだと思います。</p>\n<p>監視についてですが、<a href=\"https://www.datadoghq.com\">Datadog</a> がオススメです。\nトライアル期間しか使っていなかったのですが、実行時間や実行回数などのデータが連携するだけで可視化されるようになったのでとても便利でした。<br>また AWS 内のサービスでいくと <a href=\"https://aws.amazon.com/jp/xray/\">AWS X-Ray</a> を利用することもできると思います。\nまだ筆者は利用を始めていませんが、時間があるときのタスクに積んでいます。</p>\n<p>次に Lambda のメモリについてです。\nLambda のメモリは可動するサーバーにも影響します。\n高ければ高いほどスペックの良いサーバーで稼働します。\nここは色々試してみてサービスに最適なところを探すのがよいでしょう。<br>基本的には本番稼働する際は API Gateway の前段に CloudFront を置いていると思います。\nほとんどのユーザーは CloudFront のキャッシュを参照することになるので、低めに設定しておいてもけっこうなんとかなります。\nちなみに筆者が携わっている<a href=\"https://tsuriba.camera/\">プロダクションのサービス</a>では 512 MB で稼働させています。</p>\n<p>最後にキャッシュのお話です。\nキャッシュは運用を間違えると情報漏えいに繋がり兼ねないので設定は慎重に行うべきです。\n筆者は Express のミドルウェアに Cache Control を設定するものを追加しています。\n簡単にですが次のようなものです。\nこれは <code>https://example.com/my/xxx</code> のように <code>/my</code> 以下を CloudFront でキャッシュさせてないような設定になります（<code>/my</code> 以下はユーザーの設定ページなど）。</p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"hljs-keyword\">const</span> isMyPage = <span class=\"hljs-function\"><span class=\"hljs-params\">url</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-regexp\">/^\\/my/</span>.test(url)\n}\n\n<span class=\"hljs-keyword\">const</span> cacheMiddleware = <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (isMyPage(req.url)) {\n    res.header(<span class=\"hljs-string\">'Cache-Control'</span>, <span class=\"hljs-string\">'no-store'</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    res.header(<span class=\"hljs-string\">'Cache-Control'</span>, <span class=\"hljs-string\">`max-age=<span class=\"hljs-subst\">${<span class=\"hljs-number\">60</span>}</span>`</span>) <span class=\"hljs-comment\">// 1分間</span>\n  }\n  next()\n}\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  cacheMiddleware\n}</code></pre>\n<p>他にもなにかノウハウ的なものが見つかれば追記していこうと思います。</p>\n<h3 id=\"Nuxt.js_を_Lambda_で動かす際の理想の話\">Nuxt.js を Lambda で動かす際の理想の話</h3><p>先に全体像となる構成図から。</p>\n<p><img src=\"/images/nuxtjs-on-aws-lambda/ideal_architecture.svg\" alt=\"CloudFrontで分岐し、リソースはS3、HTMLはAPI Gatewayから取得する構成図\" draggable=\"false\"></p>\n<p>AWS のサービスのそれぞれの役割は次のようになってます。</p>\n<ul>\n<li>CloudFront<ul>\n<li>キャッシュ</li>\n<li>リクエストの分岐</li>\n</ul>\n</li>\n<li>S3<ul>\n<li>静的リソースの配信</li>\n</ul>\n</li>\n<li>API Gateway<ul>\n<li>Lambda のトリガー</li>\n</ul>\n</li>\n<li>Lambda<ul>\n<li>サーバーサイドレンダリング</li>\n</ul>\n</li>\n</ul>\n<p>このように分けている理由は</p>\n<ul>\n<li>Lambda のコンピューティングリソースの最適化<ul>\n<li>JS のリクエストなどは Lambda がファイルを選択して返すだけなので、Lambda を使うまでもない（ムダなコストカット）</li>\n</ul>\n</li>\n<li>API Gateway から画像を配信する場合はめんどう<ul>\n<li>バイナリデータを扱う場合は個別に設定してあげる必要がある（サンプルでは設定してません）</li>\n<li>ファビコンが表示されないと思います</li>\n</ul>\n</li>\n<li>API Gateway のキャッシュ機能は高い<ul>\n<li>なぜか時間単位で課金されてしまう</li>\n</ul>\n</li>\n</ul>\n<p>このような理由から上記のような構成図になります。<br>実際に実務でのプロジェクトでは上記のような構成になっています。</p>\n<h6 id=\"2019/04/18_追記\">2019/04/18 追記</h6><p>冒頭にも書きましたが、この話を同人誌として出してました。BOOTH にて販売しているのでご興味ある方はそちらをご参照ください。</p>\n<p>主な内容はデプロイと AWS の設定に関してです。\n本番運用に関する tips も載ってるので、気になるものがありましたらご購入いただけると嬉しいです。</p>\n<p>BOOTHの販売ページ：<a href=\"https://neko-note-help.booth.pm/items/1317543\">https://neko-note-help.booth.pm/items/1317543</a></p>\n<h3 id=\"なぜ_Lambda_のデプロイパッケージを小さくするのか？\">なぜ Lambda のデプロイパッケージを小さくするのか？</h3><p>これに関しては Lambda の制限が関連してきます。\n<a href=\"http://docs.aws.amazon.com/ja_jp/lambda/latest/dg/limits.html\">AWS Lambda の制限 - AWS Lambda</a>の\n「AWS Lambda デプロイメントの制限」に書かれているのですが、Lambda 関数デプロイパッケージのサイズ (圧縮 .zip/.jar ファイル)は<em>50MB</em>となっています。\n今回のサンプルのコードでも 20MB 以上あります。\nまた、リージョンあたりの、アップロードできるすべてのデプロイパッケージの合計サイズも 75GB と制限があります。\nけっこう大きい数字に思えるかもしれませんが、Lambda をメインに使うようなマイクロサービスを構成していると割りとすぐに到達してしまうと考えられます。\nそのため、可能な限り小さくしておいた方が後々のためになります。</p>\n<h3 id=\"サンプルコードのデプロイコマンド\">サンプルコードのデプロイコマンド</h3><p>サンプルコードでは次のコマンドで API Gateway をエンドポイントとしたデプロイが行えます。</p>\n<pre><code class=\"hljs \"><span class=\"hljs-variable\">$ </span>yarn <span class=\"hljs-symbol\">deploy:</span>api_gw</code></pre><p>正常に処理が完了すれば次のように生成されたエンドポイントが表示されると思います。（そこそこ時間がかかります）</p>\n<pre><code class=\"hljs \">Service Information\nservice: nuxt-<span class=\"hljs-keyword\">on</span>-lambda\nstage: dev\nregion: ap-northeast-<span class=\"hljs-number\">1</span>\nstack: nuxt-<span class=\"hljs-keyword\">on</span>-lambda-dev\napi key<span class=\"hljs-variable\">s:</span>\n  None\nendpoint<span class=\"hljs-variable\">s:</span>\n  GET - http<span class=\"hljs-variable\">s:</span>//xxxxxxxxxx.<span class=\"hljs-keyword\">execute</span>-api.ap-northeast-<span class=\"hljs-number\">1</span>.amazonaws.<span class=\"hljs-keyword\">com</span>/dev/\n  GET - http<span class=\"hljs-variable\">s:</span>//xxxxxxxxxx.<span class=\"hljs-keyword\">execute</span>-api.ap-northeast-<span class=\"hljs-number\">1</span>.amazonaws.<span class=\"hljs-keyword\">com</span>/dev/{proxy+}\n<span class=\"hljs-keyword\">function</span><span class=\"hljs-variable\">s:</span>\n  handler: nuxt-<span class=\"hljs-keyword\">on</span>-lambda-dev-handler</code></pre><p>また、カスタムドメインを使用する場合は次のコマンドでデプロイできます。</p>\n<pre><code class=\"hljs \"><span class=\"hljs-variable\">$ </span>yarn deploy</code></pre>","thumbnail":"","twitterCardType":"","createdAt":"2017-12-12","updatedAt":"2019-04-18"}