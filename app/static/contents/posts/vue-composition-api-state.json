{"title":"Vue Composition APIのコラムっぽいもの集","description":"","body":"<h2 id=\"この記事について\">この記事について</h2><p>この記事は<a href=\"https://qiita.com/advent-calendar/2019/bosyu\">bosyu Advent Calendar 2019</a>の5日目の記事です。</p>\n<p>この記事では<a href=\"https://vue-composition-api-rfc.netlify.com\">Vue Composition API</a>についてのコラムっぽいものをいくつか書いてみた記事です。</p>\n<h3 id=\"⚠️注意\">⚠️注意</h3><p>Vue Composition API自体はまだ正式なリリースがされていない実験的なAPIです。\n<a href=\"https://vue-composition-api-rfc.netlify.com/#adoption-strategy\">Vue Composition APIのサイト</a>にも記載されていますが、まだ破壊的な変更がされる可能性もあり、プロダクションでの利用は推奨されていません。</p>\n<h2 id=\"bosyuでなにやってるの？\">bosyuでなにやってるの？</h2><p>あんまり表立って言ったりしてなかったんですが、夏頃から業務委託で<a href=\"https://bosyu.me\">bosyu</a>の開発をしています。\n具体的にはbosyuのフロントエンドのテストコードの追加やTypeScript化をやったり、機能追加や改善などよくあるサービス開発をしています。</p>\n<p>※ちなみにbosyuでVue Composition APIの導入もしました（冒頭でプロダクションでの利用を注意喚起しておいて入れてます）。\nいざってときはPR出そうっていう話をメンバーでしてます。</p>\n<h2 id=\"Vue_Composition_APIとは\">Vue Composition APIとは</h2><p>ここから本題です。\nVue Composition APIはVue 3で導入される予定のVueの新しいAPIです。\nReact Hooksと機能的には似ており、機能を関数単位でまとめることができます。\nVue 2のオプションベースではdataやmethodsなどカテゴリごとに関連するデータや処理が分散してしまっていましたが、Composition APIを使うことにより関数単位でまとめて管理できるようになります。\n大きなコンポーネントになったとしても可読性が担保されます（そもそも大きすぎるコンポーネントは問題ではありますが）。</p>\n<p>文章だけだとわかりづらいので、シンプルなカウンターを例にVue 2のコードをComposition APIに書き換えて見ます。\n（このサイトのメンテナンスしてないせいでハイライトがひどくてごめんなさい）</p>\n<p><strong>Vue 2</strong></p>\n<pre><code class=\"hljs language-ts\">import Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>;\n<span class=\"hljs-builtin-name\">export</span><span class=\"hljs-built_in\"> default </span>Vue.extend({\n  data: () =&gt; ({\n    count: 0,\n  }),\n  methods: {\n    increment() {\n      this.count++;\n    },\n  },\n});</code></pre>\n<p><strong>Composition API</strong></p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { createComponent, ref } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@vue/composition-api'</span>;\n\n<span class=\"hljs-comment\">// カウンターに関わるものを関数でまとめる</span>\n<span class=\"hljs-keyword\">const</span> useCounter = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> count = ref(<span class=\"hljs-number\">0</span>);\n  <span class=\"hljs-keyword\">const</span> increment = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    count.value++;\n  };\n  <span class=\"hljs-keyword\">return</span> { count, increment };\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> createComponent({\n  setup() {\n    <span class=\"hljs-keyword\">const</span> { count, increment } = useCounter();\n    <span class=\"hljs-keyword\">return</span> { count, increment };\n  },\n});</code></pre>\n<p>行数は増えていますが、コードにおいて大事なのはコード量（だけ）ではないのでそこは気にしないでください。\n大事なのはdataとmethodsに散らばっていたコードがuseCounterという関数の中で閉じられています。\nこのuseCounterは<em>Composition Function</em>と言います（日本語にすると合成関数ですが翻訳による認識の齟齬を生まないためにもComposition Functionと呼称します）。</p>\n<p>これだけのコードでは正直ありがたみがないですが、Vueを書いている人は、ある機能に関連するコードが随所に散らばって読みづらくなるという経験をしていると思います。\nそのようなコードがComposition Functionとしてまとめることができるようになるというのはメリットではないでしょうか？</p>\n<p>ここで細かい仕様とかを書き出すときりがないので仕様などは<a href=\"https://vue-composition-api-rfc.netlify.com\">公式サイト</a>や他の方の記事をご覧ください。\nなんでComposition APIができたの？って方はサイトの始めにある動画がイラスト付きでわかりやすいのでオススメです。</p>\n<p>また公式サイトにはRFCの仕様だけではなく<a href=\"https://vue-composition-api-rfc.netlify.com/api.html\">API Reference</a>も存在するので、ref関数などのComposition APIで使えるものはそちらをご覧ください。（右上のメニューにあるんだけど見落としがちだよね）</p>\n<h2 id=\"Vue_Composition_APIのアレなところを掘り下げる\">Vue Composition APIのアレなところを掘り下げる</h2><p>公式サイトの方にDrawbacksというセクションがあります。\nこれはComposition APIに対する微妙な感じのところを公式で解説しているところです。\nその箇所を個人的に掘り下げてみようと思います。</p>\n<h3 id=\"Overhead_of_Introducing_Refs\">Overhead of Introducing Refs</h3><p>これは変数をリアクティブな変数とするために、Refでラップしないといけない点について書かれています。</p>\n<p>具体的にはどういうことかというと、さきほど書いたuseCounterの内部で、ただの数値である<code>count</code>を<code>ref関数</code>で生成しています。\nそしてincrement関数の内部で<code>count.value++</code>としています。\nつまりRefでラップすることにより値を参照・更新したいときは<code>.value</code>でアクセスする必要があり面倒だという話です。</p>\n<p><code>count++</code>とできないのはVueのリアクティブシステムに原因があります。\nこれはVueが<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">Object.defineProperty()</a>によりリアクティブシステムを構成しているためです（Vue 3になると<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a>にはなるがユーザーから見ると同じに見える）。\nObject.defineProperty()を使うことにより、Objectの参照/更新時に任意の処理を追加できます。\nVueはこれを利用して値の変更を検知してコンポーネントを再描画したりしています。</p>\n<p>Object.defineProperty()もProxyもどちらもObjectである必要があるため、シンプルに<code>count++</code>とできません。\nVue 2の頃はできていたように感じるかもしれませんが、Vue 2は<code>this</code>というObjectを経由していたため<code>this.count++</code>とすることができました。\nこの点においてはやってることとしては同じなのですが、冗長でめんどうに思えてしまうかもしれません。\nまた、Refでラップされているにもかかわらず<code>count++</code>と書いて動かないというケースが出てしまうかもしれません（<code>count.value++</code>とするのが正しい）。\nこれはJavaScriptで書いている場合頻発しそうなので、TypeScriptを使い、書いている時点で気づくための仕組みがあれば安全に開発できるのではないかと思います。</p>\n<h3 id=\"Ref_vs._Reactive\">Ref vs. Reactive</h3><p>Composition APIには<code>ref</code>と<code>reactive</code>という2つのリアクティブな変数を作る関数が存在します。\nこれはどちらがいいのかという話が書かれています。</p>\n<p>ref関数とreactive関数ですが、簡単にコードを書くと次のようになります。</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// ref</span>\n<span class=\"hljs-keyword\">const</span> coustRef = ref(0);\ncoustRef.value++;\nconsole.<span class=\"hljs-built_in\">log</span>(coustRef.value); <span class=\"hljs-comment\">// 1</span>\n\n<span class=\"hljs-comment\">// reactive</span>\n<span class=\"hljs-keyword\">const</span> countState = reactive({ <span class=\"hljs-keyword\">count</span>: 0 });\ncountState.<span class=\"hljs-keyword\">count</span>++;\nconsole.<span class=\"hljs-built_in\">log</span>(countState.<span class=\"hljs-keyword\">count</span>); <span class=\"hljs-comment\">// 1</span></code></pre>\n<p>どちらもcountをインクリメントするだけの処理をしています。\nこれだけを見るとプリミティブなときはref関数で、オブジェクトのときはreactive関数かな？となりますが、シンプルにそれだけの話ではありません。\nreactive関数を使っている場合は少し罠があります。\n次のコードでその罠が露見します。</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> countState = reactive({ <span class=\"hljs-keyword\">count</span>: 0 });\nlet { <span class=\"hljs-keyword\">count</span> } = countState;\n<span class=\"hljs-keyword\">count</span>++;\nconsole.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-keyword\">count</span>); <span class=\"hljs-comment\">// 1</span>\nconsole.<span class=\"hljs-built_in\">log</span>(countState.<span class=\"hljs-keyword\">count</span>); <span class=\"hljs-comment\">// 0</span></code></pre>\n<p>2行目で分割代入をしていますが、ここでプリミティブな値となってしまい、元のcountStateのcountプロパティとの参照が切れてしまいます。\n参照が切れるとリアクティブな値ではなくなってしまいます（countを更新しても再描画されない）。</p>\n<p>Composition Functionの中でこのように分割代入することはないですが、Composition Functionを使う方では起こりがちです。\n次のようにしてしまう場合です。</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> useCount = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> countState = reactive({ <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span> });\n  <span class=\"hljs-keyword\">return</span> {\n    ...countState,\n  };\n};\n\n<span class=\"hljs-keyword\">let</span> { count } = useCount();\ncount++; <span class=\"hljs-comment\">// このcountを更新しても再描画されない</span></code></pre>\n<p>もちろんこの解決策は用意されていて、<code>toRefs</code>という関数が存在します。\ntoRefs関数はreactive関数で作られたオブジェクトのプロパティをRef化してくれます。\nそのtoRefs関数を使うとこうなります。</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> useCount = () =&gt; {\n  <span class=\"hljs-keyword\">const</span> countState = reactive({ <span class=\"hljs-keyword\">count</span>: 0 });\n  <span class=\"hljs-keyword\">return</span> {\n    ...toRefs(countState),\n  };\n};\n\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-keyword\">count</span> } = useCount();\n<span class=\"hljs-keyword\">count</span>.value++; <span class=\"hljs-comment\">// Refになっているので更新すると再描画される</span></code></pre>\n<p>このように基本Composition Functionの中で作ったリアクティブなオブジェクトを外部で使う場合は、toRefs関数を使って返してあげる必要があります。</p>\n<p>これがreactive関数の罠です。\nこの罠だけを見るとref関数だけを使ってる方がいいんじゃないかという風にはなりますが、ref関数はref関数で<code>.value</code>プロパティ経由で値を操作する必要があり面倒さがあります。</p>\n<p>結局どのようにすればいいのかというのはこのセクションでは、「基本的にはreactive関数を使い、toRefs関数を使うことを忘れないようにしましょう。また現時点ではこのベストプラクティスをだすのは時期尚早であるため、改めてガイダンスを出す。」という風に書かれています（意訳入ってるので英文もお読みください）。</p>\n<p>ただ筆者としては今のところの結論は出ていて、「基本reactive関数を使い、ref関数は基本使わない」です。\nその理由としては</p>\n<ul>\n<li>①変数操作が直感的である</li>\n<li>②スコープ付けしやすい</li>\n<li>③書く人による差を出しづらくする</li>\n</ul>\n<p>というのがあります。\n①はvalueプロパティを使わなくていいという点で直感的ですし、②についてはreactiveを使うことで名前空間を利用できるようになります。\nそれを利用して、Composition Funcitonの中に閉じられた変数なのかどうかというのを明示できます。\n③は両方を許可していると各所で差が出てきて、書いた人による偏りが出てしまうためです。</p>\n<p>②については具体的なコードではないのですが、次のような雰囲気になります。</p>\n<pre><code class=\"hljs language-ts\">const useHoge = () =&gt; {\n  const <span class=\"hljs-keyword\">state</span> = reactive({}); // return で外部に公開する\n  const localState = reactive({});  // return せずにこの関数内でのみ利用する\n  return { ...<span class=\"hljs-keyword\">to</span>Refs(<span class=\"hljs-keyword\">state</span>) };\n}</code></pre>\n<p>こうするとこのComposition Functionではなにを公開しているのかが明示され、見返したときの可読性があがります。</p>\n<p>ここで言いたかったことをまとめておくと次のとおりです。</p>\n<ul>\n<li>refとreactiveがあるけど、基本reactiveを使う</li>\n<li>Composition Functionとコンポーネントのリアクティブな値の受け渡しはRefにする<ul>\n<li>リアクティブな変数をComposition Functionの引数でもらうときもRefでもらう</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Verbosity_of_the_Return_Statement\">Verbosity of the Return Statement</h3><p>これはsetupでreturnした値でないとtemplateで使えない点について書かれています。\nsetupの中で宣言された変数を自動的にtemplate内で使えるようにしたらどうかという提案もあったそうですが、JavaScriptとして直感に反するため採用されなかったそうです。\nその代わりIDEの拡張機能やBabelプラグインでそういったものを作るのがよいのではないかと書かれています。</p>\n<p>個人的には本文中にも書かれている通りreturnした方が明示されていてわかりやすいですし、保守性も高いように思えます。\nこれについてはあまり深堀りすることもないので軽く意訳しただけですがこれで終わりたいと思います。</p>\n<h3 id=\"More_Flexibility_Requires_More_Discipline\">More Flexibility Requires More Discipline</h3><p>Composition APIにより、柔軟性が高くなったが、その分規律が必要になったというお話です。\nこれは本当にその通りで今まで以上にスパゲッティなコードができあがる可能性は高くなります。\nそれは自由度が上がったためによるもので、決してComposition APIの仕様によるものではありません。\nしかしながらこの自由度によりコードの表現の幅が広がりました。\n今まではどうしてもobjectベースだっため、コンポーネントの機能を外に切り出すのは難しったかったです。mixinという形で切り出せはしましたが、書き心地がいいものではなかったと思います。\nそれを関数という形で切り出せるようになったので、.vueファイルに書かずに、.jsや.tsなど別のファイルに書くということがやりやすくなります。\nそうするとテストもやりやすくなりますし、.vueファイルはシンプルにviewに関することと必要なComposition Functionを呼び出すことだけになり、よりviewに集中しやすくなります。\nいっそのことSFCのscriptブロックを別ファイルにして、scriptブロックのsrc属性で読み込むということをしてもいいかもしれません。</p>\n<p>またComposition APIはVueと独立して使うことができます。\nそのためJestなどでComposition Functionをテストする際は、Vueのコンポーネントのようにtest utilsなどのサポートライブラリを必要とせずテストすることが可能になります。<br>あと完全に思いつきでしかないのですが、Composition APIを他のviewライブラリと組み合わせことも不可能ではないと思います。watchで再描画を行うようにすることで可能になると思います。\nまあVueをやめても使い回せるというメリットがあるかもしれませんが、再描画する処理を自身で書いていくのは現実的でないのでやめておいたほうがいいように思います。</p>\n<p>スパゲッティコードが生成される件については、書く人自身のスキルを上げていくしかないように思います。\nもし不安であればVue 3でも今まで通りobjectベースの書き方もできるので、無理にComposition APIを使う必要はないです（objectベースで書いたからと言ってスパゲッティにならないわけではない）。\n本文中にも書かれているのですが、適切にJavaScriptを書く力があれば適切にComposition APIを書くことができるでしょう。\n結局のところコードを上手く書くには書く人自身のスキルが必要になってきます。\nフレームワークやライブラリはあくまで道具だということを忘れてはいけないように思います。</p>\n<p>ただComposition APIについてはまだリリースもされていないものなので、知見がまだ出てきていません。\n知見が出てきてから使うというのでも遅くはないように思います。\n今時点で言えることはComposition Functionを小さく保ち、コンポーネントのsetup内はComposition Functionを呼び出す程度に作っていけば、激しいスパゲッティコードになることはないと考えています。</p>\n<h2 id=\"Propsがリアクティブがじゃなくなる？\">Propsがリアクティブがじゃなくなる？</h2><p>これは筆者がComposition APIを使っていてハマった落とし穴についてです。\nComposition APIではPropsはsetupの第一引数に入ってきます。\nわかりやすくするために次のようなscriptを持ったコンポーネントがあったとします。\nよくあるinputタグをコンポーネント化したものです。</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-builtin-name\">export</span><span class=\"hljs-built_in\"> default </span>createComponent({\n  props: {\n    value: {\n      type: String,\n      required: <span class=\"hljs-literal\">true</span>,\n    },\n  },\n  setup(props, { emit }) {\n    const model = computed({\n      get: () =&gt; props.value,\n      set: value =&gt; emit(<span class=\"hljs-string\">'input'</span>, value),\n    });\n    return { model };\n  },\n});</code></pre>\n<p>このコンポーネントは問題なく動くのですが、次のようにpropsを分割代入することである問題が発生します。</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-builtin-name\">export</span><span class=\"hljs-built_in\"> default </span>createComponent({\n  props: {\n    value: {\n      type: String,\n      required: <span class=\"hljs-literal\">true</span>,\n    },\n  },\n  setup({ value }, { emit }) {\n    const model = computed({\n      get: () =&gt; value,\n      set: value =&gt; emit(<span class=\"hljs-string\">'input'</span>, value),\n    });\n    return { model };\n  },\n});</code></pre>\n<p>動かしてみると一見動いているように見えますが、親のコンポーネントでpropsに渡しているvalueを更新すると、それが子となるこのコンポーネントに反映されません。\nこれはプリミティブな値となってしまったため、参照が外れ同じ値ではなくなってしまったため起こってしまいます。\nそのためsetupのpropsはオブジェクトのまま受け取るようにしておかないと思わぬバグにつながるかもしれません。</p>\n<h4 id=\"余談：modelの生成をComposition_Functionとして切り出す\">余談：modelの生成をComposition Functionとして切り出す</h4><p>こうなります。これでTextareaのコンポーネントでも再利用できます。</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// Composition Function</span>\n<span class=\"hljs-keyword\">const</span> useModel = <span class=\"hljs-function\">(<span class=\"hljs-params\">props: { value: <span class=\"hljs-built_in\">string</span> }, emit: SetupContext['emit']</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> model = computed({\n    <span class=\"hljs-keyword\">get</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> props.value,\n    <span class=\"hljs-keyword\">set</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> emit(<span class=\"hljs-string\">'input'</span>, v),\n  });\n  <span class=\"hljs-keyword\">return</span> { model };\n};\n\n<span class=\"hljs-comment\">// component</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> createComponent({\n  props: {\n    value: {\n      <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-built_in\">String</span>,\n      required: <span class=\"hljs-literal\">true</span>,\n    },\n  },\n  setup(props, { emit }) {\n    <span class=\"hljs-keyword\">const</span> { model } = useModel(props, emit);\n    <span class=\"hljs-keyword\">return</span> { model };\n  },\n});</code></pre>\n<p>ちなみにComposition Functionとして切り出した場合もpropsはobjectとして受け取らないといけません。\nこうしなければいけない理由は参照が切れるからです。\nちょっといけてないですが仕方ないですね。</p>\n<h2 id=\"Vuexはいらなくなる？\">Vuexはいらなくなる？</h2><h2 id=\"次回Vue_Composition_APIの設計戦略\">次回Vue Composition APIの設計戦略</h2>","thumbnail":"","twitterCardType":"","createdAt":"","updatedAt":""}